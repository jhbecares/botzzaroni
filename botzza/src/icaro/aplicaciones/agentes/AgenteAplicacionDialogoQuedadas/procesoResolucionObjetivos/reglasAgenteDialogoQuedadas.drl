import icaro.infraestructura.recursosOrganizacion.recursoTrazas.ItfUsoRecursoTrazas;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.imp.componentes.InfoTraza;
import icaro.aplicaciones.recursos.persistenciaMensajesGrupo.*;
import icaro.infraestructura.entidadesBasicas.NombresPredefinidos;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.*;
import icaro.infraestructura.patronAgenteCognitivo.procesadorObjetivos.gestorTareas.ItfGestorTareas;
import icaro.infraestructura.entidadesBasicas.PerformativaUsuario;
import icaro.infraestructura.entidadesBasicas.comunicacion.*
import icaro.aplicaciones.agentes.AgenteAplicacionDialogoPaciente.objetivos.*;
import icaro.aplicaciones.informacion.gestionCitas.*;
import icaro.aplicaciones.informacion.gestionQuedadas.*;
import icaro.aplicaciones.agentes.AgenteAplicacionDialogoQuedadas.objetivos.*;
import icaro.aplicaciones.agentes.AgenteAplicacionDialogoQuedadas.tareas.*;
import icaro.aplicaciones.agentes.AgenteAplicacionDialogoQuedadas.tools.*;
import java.util.Calendar;

global ItfGestorTareas gestorTareas;
global ItfUsoRecursoTrazas recursoTrazas;
global String agentId;

/*
rule "Recibir no para guardar la quedada (sin grupo receptor)"
when
	ob:GuardarQuedadaIncompleta(chat:objectReferenceId, state == Objetivo.PENDING)
	fc:FocoGrupo(grupo == chat, foco == ob)
	notif:NotificacionQuedada(identNotificador == chat, tipoNotificacion == tipoNotif.no, msgg:mensajeNotificacion )
	que:Quedada(idChat == chat)
then
	ob.setSolved();
    
	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
    tarea.ejecutar(chat, ConversacionBotzza.msg("despedirse"));
        
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
    update(ob);
	retract(notif);
end
*/
/*
rule "Recibir no para guardar la quedada (con grupo receptor)"
when
	ob:ObtenerConfirmacionMatchingCuandoFunciona(chat:objectReferenceId, state == Objetivo.PENDING)
	fc:FocoGrupo(grupo == chat, foco == ob)
	notif:NotificacionQuedada(identNotificador == chat, tipoNotificacion == tipoNotif.no, msgg:mensajeNotificacion )
	que:Quedada(idChat == chat)
then
	ob.setSolved();
    
	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
    tarea.ejecutar(chat, ConversacionBotzza.msg("despedirse"));
        
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
    update(ob);
	retract(notif);
end

*/
/** REGLAS PARA MOSTRAR LA INFORMACION DE LA QUEDADA Y PEDIR SU CONFIRMACION **/
rule "Mostrar informacion de la quedada que se ha hecho"
when
	ob:ObtenerConfirmacion(chat:objectReferenceId, state == Objetivo.PENDING)
	fc:FocoGrupo(grupo == chat, foco == null)
	que:Quedada(idChat == chat)
then

    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ConfirmarQuedada.class);
    tarea.ejecutar(chat, que);
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	
   	fc.setFoco(ob);
   	update(fc);
end



/** REGLAS PARA SOLICITAR Y RECIBIR LA FECHA Y HORA DE LA QUEDADA **/
/*
rule "Solicitar fecha de la quedada (dia y hora)"
 when
 	ob:ObtenerFechaQuedada(chat:objectReferenceId, state == Objetivo.PENDING)
 	not( exists (ObtenerDiaQuedada(objectReferenceId == chat)))
 	not( exists (ObtenerHoraQuedada(objectReferenceId == chat)))
 	fc:FocoGrupo(grupo == chat, foco == null)
 then
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
    tarea.ejecutar(chat,ConversacionBotzza.msg("pedirFechayHora"));
    
 	Objetivo id1 = new ObtenerDiaQuedada();
 	id1.setobjectReferenceId(chat);
 	Objetivo id2 = new ObtenerHoraQuedada();
 	id2.setobjectReferenceId(chat);
 	
    insert(id1);
    insert(id2);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Obtener fecha de la quedada (dia y hora)"
 salience 40
 when
 	ob:ObtenerFechaQuedada(chat:objectReferenceId, state == Objetivo.PENDING || state == Objetivo.SOLVING)
 	ob1:ObtenerDiaQuedada(objectReferenceId == chat, state != Objetivo.SOLVING)
 	ob2:ObtenerHoraQuedada(objectReferenceId == chat, state != Objetivo.SOLVING)
 	fc:FocoGrupo(foco == null, grupo == chat)
 	notif:NotificacionQuedada(identNotificador == chat,
 			tipoNotificacion == tipoNotif.fecha || 
 			tipoNotificacion == tipoNotif.fechaAnterior || 
 			tipoNotificacion == tipoNotif.hora, 
 			msgg:mensajeNotificacion)
 	que:Quedada(idChat == chat)
 then
 	if (notif.tipoNotificacion.equals(tipoNotif.fecha)){
 		que.setFecha(msgg);
 		ob1.setSolved();
 		update(ob1);
 		recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"DETECTADO DIA!!!");
 	}
 	else if (notif.tipoNotificacion.equals(tipoNotif.fechaAnterior)){
 		TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
    	tarea.ejecutar(chat, ConversacionBotzza.msg("fechaAnterior"));
    	fc.setFoco(ob1);
    	ob1.setSolving();
    	update(ob1);
    	update(fc);
 	}
 	else { // notif.tipoNotificacion == tipoNotif.hora
 		que.setHora(msgg);
 		ob2.setSolved();
 		update(ob2);
 		recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"DETECTADA HORA!!!");
 	}
 	
 	if (ob1.getState() == Objetivo.SOLVED && ob2.getState() == Objetivo.SOLVED){
 		ob.setSolved();
 		recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"OBJETIVO FECHA COMPLETA CONSEGUIDO!!!");
 		
 		Objetivo obConfirmacion = new ObtenerConfirmacion();
 		obConfirmacion.setobjectReferenceId(chat);
 		insert(obConfirmacion); 
 		
 	}
 	else
 		ob.setSolving();
 	
 	update(ob);
 	update(que);
    retract(notif);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"EJECUTO LA REGLA: " + drools.getRule().getName());
end
*/
rule "Focalizar info restante de la fecha de la quedada"
 timer( int: 1s )
 when
 	ob:ObtenerFechaQuedada(chat:objectReferenceId, state == Objetivo.SOLVING)
 	ob1:ObtenerDiaQuedada(objectReferenceId == chat, state != Objetivo.SOLVING)
 	ob2:ObtenerHoraQuedada(objectReferenceId == chat, state != Objetivo.SOLVING)
 	fc:FocoGrupo(foco == null, grupo == chat)
 then
 	if (ob1.getState() == Objetivo.PENDING)
 		fc.setFoco(ob1);
 	else if (ob2.getState() == Objetivo.PENDING)
 		fc.setFoco(ob2);
 	
 	if (ob1.getState() == Objetivo.SOLVED && ob2.getState() == Objetivo.SOLVED){
 		ob.setSolved();
 		update(ob);
 		recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"OBJETIVO FECHA COMPLETA CONSEGUIDO!!!");
 		
 		fc.setFoco(null);
 		
 		Objetivo obConfirmacion = new ObtenerConfirmacion();
 		obConfirmacion.setobjectReferenceId(chat);
 		insert(obConfirmacion);
 	}
 	
 	update(fc);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"EJECUTO LA REGLA: " + drools.getRule().getName());
end
/*
rule "Solicitar dia de la quedada"
 when
 	ob:ObtenerFechaQuedada(chat:objectReferenceId, state == Objetivo.SOLVING)
 	ob1:ObtenerDiaQuedada(objectReferenceId == chat, state == Objetivo.PENDING)
 	fc:FocoGrupo(grupo == chat, foco == ob1)
 then
  	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());
  	ob1.setSolving();
  	
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
    tarea.ejecutar(chat, ConversacionBotzza.msg("pedirFecha"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	update(ob1);
end
*/
rule "Obtener dia de la quedada"
when
	ob:ObtenerFechaQuedada(chat:objectReferenceId, state == Objetivo.SOLVING)
 	ob1:ObtenerDiaQuedada(objectReferenceId == chat, state == Objetivo.SOLVING)
 	fc:FocoGrupo(grupo == chat, foco == ob1)
	notif:NotificacionQuedada(identNotificador == chat, tipoNotificacion == tipoNotif.fecha, msgg:mensajeNotificacion )
	que:Quedada(idChat == chat)
 then
 	que.setFecha(msgg);
 	ob1.setSolved();
 	fc.setFoco(null);
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	update(ob1);
   	update(que);
   	update(fc);
   	retract(notif);
end
/*
rule "Obtencion de un dia anterior a hoy para hacer la quedada"
when
	ob:ObtenerFechaQuedada(chat:objectReferenceId, state == Objetivo.SOLVING)
 	ob1:ObtenerDiaQuedada(objectReferenceId == chat, state == Objetivo.SOLVING)
 	fc:FocoGrupo(grupo == chat, foco == ob1)
	notif:NotificacionQuedada(identNotificador == chat, tipoNotificacion == tipoNotif.fechaAnterior, msgg:mensajeNotificacion )
 then
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
    tarea.ejecutar(chat, ConversacionBotzza.msg("fechaAnterior"));
   	retract(notif);
end
*/
/*
rule "Solicitar hora de la quedada"
 when
 	ob:ObtenerFechaQuedada(chat:objectReferenceId, state == Objetivo.SOLVING)
 	ob2:ObtenerHoraQuedada(objectReferenceId == chat, state == Objetivo.PENDING)
 	fc:FocoGrupo(grupo == chat, foco == ob2)
 then
  	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());
  	ob2.setSolving();
  	
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
    tarea.ejecutar(chat, ConversacionBotzza.msg("pedirHora"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	update(ob2);
end

rule "Obtener hora de la quedada"
when
	ob:ObtenerFechaQuedada(chat:objectReferenceId, state == Objetivo.SOLVING)
 	ob2:ObtenerHoraQuedada(objectReferenceId == chat, state == Objetivo.SOLVING)
 	fc:FocoGrupo(grupo == chat, foco == ob2)
	notif:NotificacionQuedada(identNotificador == chat, tipoNotificacion == tipoNotif.hora, msgg:mensajeNotificacion )
	que:Quedada(idChat == chat)
 then
 	que.setHora(msgg);
 	ob2.setSolved();
 	fc.setFoco(null);
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	update(ob2);
   	update(que);
   	update(fc);
   	retract(notif);
end
*/
