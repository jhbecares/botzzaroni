import icaro.infraestructura.recursosOrganizacion.recursoTrazas.ItfUsoRecursoTrazas;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.imp.componentes.InfoTraza;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.*;
import icaro.infraestructura.patronAgenteCognitivo.procesadorObjetivos.gestorTareas.ItfGestorTareas;
import icaro.infraestructura.entidadesBasicas.PerformativaUsuario;
import icaro.infraestructura.entidadesBasicas.comunicacion.*
import icaro.aplicaciones.agentes.AgenteAplicacionPizzero.objetivos.*;

import icaro.aplicaciones.agentes.AgenteAplicacionPizzero.tareas.*;
import icaro.aplicaciones.agentes.AgenteAplicacionPizzero.tools.*;
import icaro.aplicaciones.informacion.gestionPizzeria.*;

import icaro.aplicaciones.informacion.gestionPizzeria.FocoUsuario;

import icaro.infraestructura.entidadesBasicas.interfaces.InterfazUsoAgente;
import icaro.infraestructura.entidadesBasicas.NombresPredefinidos;
import icaro.infraestructura.entidadesBasicas.comunicacion.MensajeSimple;

import icaro.aplicaciones.informacion.gestionPizzeria.Pizza.TamanioPizza;
import icaro.aplicaciones.informacion.gestionPizzeria.Pizza.MasaPizza;

import java.util.ArrayList;

global ItfGestorTareas gestorTareas;
global ItfUsoRecursoTrazas recursoTrazas;
global String agentId;


rule "Creacion de los objetivos iniciales"
when 
then 
	TareaSincrona tarea = gestorTareas.crearTareaSincrona(InicializarInfoWorkMem.class);
    tarea.ejecutar();
	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
	 
end

rule "Pide las alergias"
 when
    user:Usuario()
 then
 	Objetivo obGeneral = new ObtenerPedidoPizza();
 	obGeneral.setobjectReferenceId(user.getUsername());
 	obGeneral.setSolving();
 	Objetivo ob = new ObtenerAlergia();
 	ob.setobjectReferenceId(user.getUsername());
 	FocoUsuario f = new FocoUsuario(user.getUsername());
 	f.setFoco(ob);
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoPizzero.class);
    tarea.ejecutar(user.getUsername(), ConversacionPizzero.msg("solicitarAlergia"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    
    Pedido p = new Pedido();
    p.setUsuario(user);
    System.out.println(p);
    
    insert(p);
    
   	insert(ob);
   	insert(obGeneral);
   	insert(f);
   	// insert(user);
end

rule "No obtiene las alergias"
 when
    notif:Notificacion(group:identNotificador, tipoNotificacion == tipoNotif.no, msgg:mensajeNotificacion)
    obGeneral:ObtenerPedidoPizza(state == SOLVING)
    ob:ObtenerAlergia(state == PENDING)
    f: FocoUsuario(foco == ob)
    p: Pedido()
 then/*
 	ob.setSolved();
 	Objetivo ob1 = new ObtenerNumeroPizzas();
 	ob1.setobjectReferenceId(group);
 	f.setFoco(ob1);
 	
 	p.tieneAlergia = false;
 	update(p);
 	
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoPizzero.class);
    tarea.ejecutar(group, ConversacionPizzero.msg("obtieneAlergia"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    update(ob);
    update(f);
    insert(ob1);
    retract(notif);*/
    
    //Modificado por Vero y Alfonso
    
    obGeneral.setSolved();
    update(obGeneral);
end

rule "Obtiene las alergias"
 when
    notif:Notificacion(group:identNotificador, tipoNotificacion == tipoNotif.si, msgg:mensajeNotificacion)
    obGeneral:ObtenerPedidoPizza(state == SOLVING)
    ob:ObtenerAlergia(state == PENDING)
    f: FocoUsuario(foco == ob)
    p: Pedido()
 then
 	ob.setSolved();
 	Objetivo ob1 = new ObtenerIngredientesAlergias();
 	ob1.setobjectReferenceId(group);
 	f.setFoco(ob1);
 	
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoPizzero.class);
    tarea.ejecutar(group, ConversacionPizzero.msg("obtieneIngredientesAlergias"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    update(ob);
    update(f);
    insert(ob1);
    retract(notif);
    p.tieneAlergia = true;
    update(p);
end



rule "Obtiene las alergias correctamente"
when 
	notif:Notificacion(group:identNotificador, tipoNotificacion == tipoNotif.ingredientes, msgg:mensajeNotificacion)
    obGeneral:ObtenerPedidoPizza(state == SOLVING)
    ob:ObtenerIngredientesAlergias(state == PENDING)
    f: FocoUsuario(foco == ob)
    p: Pedido()
 then
 
    ob.setSolved();
    Objetivo ob1 = new ObtenerNumeroPizzas();
    f.setFoco(ob1);
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoPizzero.class);
    TareaSincrona tarea1 = gestorTareas.crearTareaSincrona(ParserIngredientesAlergia.class);
    tarea.ejecutar(group, ConversacionPizzero.msg("obtieneIngredientesAlergiasCorrecto"));
    tarea1.ejecutar(msgg, p);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    update(f);
 	insert(ob1);
    retract(notif);
end



rule "Obtiene las alergias incorrectamente"
when
    notif:Notificacion(group:identNotificador, tipoNotificacion != tipoNotif.ingredientes)
    obGeneral:ObtenerPedidoPizza(state == SOLVING)
    ob: ObtenerIngredientesAlergias(state == PENDING)
    f: FocoUsuario(foco == ob)
 then

  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoPizzero.class);
    tarea.ejecutar(group, ConversacionPizzero.msg("obtieneIngredientesAlergiasIncorrecto"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    retract(notif);
end

rule "Obtiene las alergias respuesta incorrecta"
 when
    notif:Notificacion(group:identNotificador, tipoNotificacion != tipoNotif.si && tipoNotificacion != tipoNotif.no)
    obGeneral:ObtenerPedidoPizza(state == SOLVING)
    ob:ObtenerAlergia(state == PENDING)
    f: FocoUsuario(foco == ob)
 then
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoPizzero.class);
    tarea.ejecutar(group, ConversacionPizzero.msg("solicitarAlergiaIncorrecta"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    retract(notif);
end

rule "Solicitar numero de pizzas"
 when
 	obGeneral:ObtenerPedidoPizza(group:objectReferenceId, state == SOLVING)
    ob1:ObtenerNumeroPizzas(state == PENDING)
    f: FocoUsuario(foco == ob1) 
 then
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoPizzero.class);
    tarea.ejecutar(group, ConversacionPizzero.msg("solicitarNumeroPizzas"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end

rule "Regla de obtener numero de pizzas"
 when
    notif:Notificacion(group: identNotificador, tipoNotificacion == tipoNotif.numero, msgg:mensajeNotificacion)
 	obGeneral:ObtenerPedidoPizza(state == SOLVING)
 	ob:ObtenerNumeroPizzas(state == PENDING)
 	f: FocoUsuario(foco == ob) 
 	p: Pedido()
 then 
  	ob.setSolved();
 	Objetivo ob1 = new ObtenerTipoPizza();
 	ob1.setobjectReferenceId(group);
 	f.setFoco(ob1);

 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoPizzero.class);  
 	TareaSincrona tarea1 = gestorTareas.crearTareaSincrona(ParserNumeroPizzas.class); 
 	tarea1.ejecutar(msgg, p);
 	if(p.numeroPizzas == 1){
	    tarea.ejecutar(group,ConversacionPizzero.msg("obtenerUnaPizza"));
   	} else{
   		tarea.ejecutar(group,ConversacionPizzero.msg("obtenerPizzas"));
   	}
   	
	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	update(f);
   	update(ob);
   	insert(ob1);
   	retract(notif);
end


rule "Regla de obtener numero de pizzas incorrecta"
 when
    notif:Notificacion(group: identNotificador, tipoNotificacion != tipoNotif.numero)
 	obGeneral:ObtenerPedidoPizza(state == SOLVING)
 	ob:ObtenerNumeroPizzas(state == PENDING)
 	f: FocoUsuario(foco == ob) 
 then 
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoPizzero.class);  	
  	tarea.ejecutar(group,ConversacionPizzero.msg("obtenerNumeroPizzasIncorrecto"));
	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	retract(notif);
end

rule "Solicitar tipo de pizza"
 when
 	obGeneral:ObtenerPedidoPizza(group:objectReferenceId, state == SOLVING)
    ob1:ObtenerTipoPizza(state == PENDING)
    f: FocoUsuario(foco == ob1) 
    p: Pedido()
    user:Usuario()
 then
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoPizzero.class);
    tarea.ejecutar(group, ConversacionPizzero.msg("obtenerTipoPizza1") + p.numeroTotalPizzas + ConversacionPizzero.msg("obtenerTipoPizza2"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    
    Pizza pizza = new Pizza();
    pizza.setUsuarioCreador(user);
    insert(pizza);
end

rule "Obtiene el tipo de pizza de la casa"
 when
    notif:Notificacion(group:identNotificador, tipoNotificacion == tipoNotif.tipoPizzaCasa, msgg:mensajeNotificacion)
    obGeneral:ObtenerPedidoPizza(state == SOLVING)
    ob:ObtenerTipoPizza(state == PENDING)
    f: FocoUsuario(foco == ob)
    pizza:Pizza()
 then
 	ob.setSolved();
 	Objetivo ob1 = new MostrarCarta();
 	ob1.setobjectReferenceId(group);
 	f.setFoco(ob1);
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoPizzero.class);
    tarea.ejecutar(group, ConversacionPizzero.msg("solicitarPizza"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    update(ob);
    update(f);
    insert(ob1);
    retract(notif);
    
    pizza.setPersonalizada(false);
    pizza.setSalsa("Botzzaroni");
    System.out.println(pizza);
    
    update(pizza);
end

rule "Obtiene el tipo de pizza personalizada"
 when
    notif:Notificacion(group:identNotificador, tipoNotificacion == tipoNotif.tipoPizzaPersonalizada, msgg:mensajeNotificacion)
    obGeneral:ObtenerPedidoPizza(state == SOLVING)
    ob:ObtenerTipoPizza(state == PENDING)
    f: FocoUsuario(foco == ob)
    pizza:Pizza()
 then
 	ob.setSolved();
 	Objetivo ob1 = new MostrarIngredientes();
 	ob1.setobjectReferenceId(group);
 	f.setFoco(ob1);
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoPizzero.class);
    tarea.ejecutar(group, ConversacionPizzero.msg("solicitarIngredientes"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    update(ob);
    update(f);
    insert(ob1);
    retract(notif);
    
    pizza.setPersonalizada(true);
    System.out.println(pizza);
    update(pizza);
end

rule "Obtiene el tipo de pizza recomendacion"
 when
    notif:Notificacion(group:identNotificador, tipoNotificacion == tipoNotif.tipoPizzaRecomendacion, msgg:mensajeNotificacion)
    obGeneral:ObtenerPedidoPizza(state == SOLVING)
    ob:ObtenerTipoPizza(state == PENDING)
    f: FocoUsuario(foco == ob)
 then
 	ob.setSolved();
 	Objetivo ob1 = new GuardarTipoPizzaRecomendacion();
 	ob1.setobjectReferenceId(group);
 	f.setFoco(ob1);
 	TareaSincrona tarea1 = gestorTareas.crearTareaSincrona(ObtenerRecomendaciones.class);
 	tarea1.ejecutar();
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    update(ob);
    update(f);
    insert(ob1);
    retract(notif);

end

rule "Obtiene nombre de pizza recomendada incorrecto 2"
salience 100
 when
 	notif:Notificacion(group:identNotificador, tipoNotificacion == tipoNotif.NombrePizzaPersonalizada, msgg:mensajeNotificacion)
    obGeneral:ObtenerPedidoPizza(state == SOLVING)
    ob:GuardarTipoPizzaRecomendacion(state == PENDING)
    f: FocoUsuario(foco == ob)
    pizza:Pizza(tamanio == TamanioPizza.familiar)
    lista:ArrayList()
 then
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoPizzero.class);
 	tarea.ejecutar("", ConversacionPizzero.msg("nombrePizzaIncorrecto"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end

rule "Guarda el tipo de pizza recomendada"
 when
    notif:Notificacion(group:identNotificador, tipoNotificacion == tipoNotif.NombrePizzaPersonalizada, msgg:mensajeNotificacion)
    obGeneral:ObtenerPedidoPizza(state == SOLVING)
    ob:GuardarTipoPizzaRecomendacion(state == PENDING)
    f: FocoUsuario(foco == ob)
    pizza:Pizza(tamanio != TamanioPizza.familiar)
    lista:ArrayList()
 then
 	ob.setSolved();
 	
 	Objetivo ob1 = new NombrePersonalizadaCorrecto();
 	f.setFoco(ob1);
 	System.out.println("**********: " + pizza);
 	
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(ExtraerPizzaRecomendada.class);
 	tarea.ejecutar(msgg,lista, pizza);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    update(ob);
    update(f);
    retract(notif);
    insert(ob1);
    System.out.println("**********: " + pizza);
end

rule "Obtiene nombre de pizza recomendada incorrecto"
 when
 	notif:Notificacion(group:identNotificador, tipoNotificacion != tipoNotif.NombrePizzaPersonalizada, msgg:mensajeNotificacion)
    obGeneral:ObtenerPedidoPizza(state == SOLVING)
    ob:GuardarTipoPizzaRecomendacion(state == PENDING)
    f: FocoUsuario(foco == ob)
 then
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoPizzero.class);
 	tarea.ejecutar("", ConversacionPizzero.msg("nombrePizzaIncorrecto"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end

rule "Obtiene nombre de pizza recomendada correcto"
 when
    obGeneral:ObtenerPedidoPizza(state == SOLVING)
    ob:NombrePersonalizadaCorrecto(state == PENDING)
    f: FocoUsuario(foco == ob)
    pizza:Pizza(tamanio != TamanioPizza.familiar)
    p: Pedido()
 then
 	ob.setSolved();
 	Objetivo ob1 = new ObtenerSalsa();

 	f.setFoco(ob1);
	p.addPizza(pizza);
	System.out.println("***************"+ p);
 	TareaSincrona tarea1 = gestorTareas.crearTareaSincrona(MensajeGenericoPizzero.class);
 	tarea1.ejecutar("", ConversacionPizzero.msg("tengoTuPizza"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    update(ob);
    update(f);
    insert(ob1);
	update(p);
	
	System.out.println(p);
end


rule "Obtener ingredientes pizza personalizada"
when 
	notif:Notificacion(group:identNotificador, tipoNotificacion == tipoNotif.ingredientes, msgg:mensajeNotificacion)
    obGeneral:ObtenerPedidoPizza(state == SOLVING)
    ob:MostrarIngredientes(state == PENDING)
    f: FocoUsuario(foco == ob)
    p: Pedido()
    pizza: Pizza()
 then

    ob.setSolved();
    Objetivo ob1 = new GuardarPizza();
    f.setFoco(ob1);
    TareaSincrona tarea1 = gestorTareas.crearTareaSincrona(ParserIngredientesPersonalizada.class);
    tarea1.ejecutar(msgg, pizza);
    update(p);
 	update(f);
 	update(ob);
 	insert(ob1);
    String ing="";
    ArrayList<Ingrediente> listaIng = pizza.getIngredientes();
    for(int i=0; i < listaIng.size()-1; i++){
    	ing = ing + listaIng.get(i) + ", ";
    }
    ing += listaIng.get(listaIng.size()-1);
    String mensaje = ConversacionPizzero.msg("guardarPizzaPersonalizada").replaceAll("\\*", ing);
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoPizzero.class);
    tarea.ejecutar(group, mensaje);
    tarea.ejecutar(group, ConversacionPizzero.msg("guardarNombrePizza"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    
    retract(notif);
end

rule "Obtener ingredientes pizza personalizada incorrecto"
when 
	notif:Notificacion(group:identNotificador, tipoNotificacion != tipoNotif.ingredientes, msgg:mensajeNotificacion)
    obGeneral:ObtenerPedidoPizza(state == SOLVING)
    ob:MostrarIngredientes(state == PENDING)
    f: FocoUsuario(foco == ob)
    p: Pedido()
    pizza: Pizza()
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoPizzero.class);
    tarea.ejecutar(group, ConversacionPizzero.msg("obtieneIngredientesAlergiasIncorrecto"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    retract(notif);
end

rule "Solicita guardar pizza personalizada afirmacion"
  when
    notif:Notificacion(group:identNotificador, tipoNotificacion == tipoNotif.si)
 	obGeneral:ObtenerPedidoPizza(state == SOLVING)
    ob:GuardarPizza(state == PENDING)
    f: FocoUsuario(foco == ob)
 then
 	ob.setSolved();
    Objetivo ob1 = new SolicitarNombrePizza();
    f.setFoco(ob1);
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoPizzero.class);
    tarea.ejecutar(group, ConversacionPizzero.msg("pedirNombrePizza"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    update(f);
    update(ob);
 	insert(ob1);
 	retract(notif);
end

rule "Solicita guardar pizza personalizada negacion"
  when
    notif:Notificacion(group:identNotificador, tipoNotificacion == tipoNotif.no)
 	obGeneral:ObtenerPedidoPizza(state == SOLVING)
    ob:GuardarPizza(state == PENDING)
    f: FocoUsuario(foco == ob) 
 then
 	ob.setSolved();
    Objetivo ob1 = new ObtenerSalsa();
    f.setFoco(ob1);
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoPizzero.class);
    tarea.ejecutar(group, ConversacionPizzero.msg("noGuardarNombrePizza"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    update(f);
    update(ob);
 	insert(ob1);
 	retract(notif);
end

rule "Solicita guardar pizza incorrecta"
 when
    notif:Notificacion(group:identNotificador, tipoNotificacion != tipoNotif.si && tipoNotificacion != tipoNotif.no)
    obGeneral:ObtenerPedidoPizza(state == SOLVING)
    ob:GuardarPizza(state == PENDING)
    f: FocoUsuario(foco == ob)
 then
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoPizzero.class);
    tarea.ejecutar(group, ConversacionPizzero.msg("guardarNombrePizzaIncorrecto"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    retract(notif);
end

rule "Obtener nombre pizza"
  when
    notif:Notificacion(group:identNotificador, tipoNotificacion == tipoNotif.NombrePizzaPersonalizada, msgg:mensajeNotificacion)
 	obGeneral:ObtenerPedidoPizza(state == SOLVING)
    ob:SolicitarNombrePizza(state == PENDING)
    f: FocoUsuario(foco == ob)
    pizza: Pizza()
 then
 	ob.setSolved();
    Objetivo ob1 = new ObtenerSalsa();
    f.setFoco(ob1);
    pizza.setNombrePizza(msgg);
    
   	TareaSincrona tarea1 = gestorTareas.crearTareaSincrona(InsertaPizzaPersonalizada.class);
 	tarea1.ejecutar(pizza);
    
    String mensaje = ConversacionPizzero.msg("obtenerNombrePizza").replaceAll("\\*", msgg);
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoPizzero.class);
    tarea.ejecutar(group, mensaje);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    update(f);
 	insert(ob1);
 	update(pizza);
 	retract(notif);
end

rule "Obtener nombre pizza incorrecto"
  when
    notif:Notificacion(group:identNotificador, tipoNotificacion != tipoNotif.NombrePizzaPersonalizada, msgg:mensajeNotificacion)
 	obGeneral:ObtenerPedidoPizza(state == SOLVING)
    ob:SolicitarNombrePizza(state == PENDING)
    f: FocoUsuario(foco == ob)
    pizza: Pizza()
 then
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoPizzero.class);
    tarea.ejecutar(group, ConversacionPizzero.msg("nombrePizzaPersonalizadaIncorrecto"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
 	retract(notif);
end

rule "Obtiene el tipo de pizza incorrecto"
 when
    notif:Notificacion(group:identNotificador, tipoNotificacion != tipoNotif.tipoPizzaCasa && tipoNotificacion != tipoNotif.tipoPizzaPersonalizada && tipoNotificacion != tipoNotif.tipoPizzaRecomendacion, msgg:mensajeNotificacion)
    obGeneral:ObtenerPedidoPizza(state == SOLVING)
    ob:ObtenerTipoPizza(state == PENDING)
    f: FocoUsuario(foco == ob)
 then
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoPizzero.class);
    tarea.ejecutar(group, ConversacionPizzero.msg("tipoPizzaIncorrecto"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    retract(notif);
end

rule "Obtiene nombre de pizza de la casa"
salience 99
 when
    notif:Notificacion(group:identNotificador, tipoNotificacion == tipoNotif.pizzas, msgg:mensajeNotificacion)
    obGeneral:ObtenerPedidoPizza(state == SOLVING)
    ob:MostrarCarta(state == PENDING)
    f: FocoUsuario(foco == ob)
    pizza:Pizza()
 then
 	ob.setSolved();
 	Objetivo ob1 = new SolicitarTamanio();
 	ob1.setobjectReferenceId(group);
 	f.setFoco(ob1);
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoPizzero.class);
    tarea.ejecutar(group, ConversacionPizzero.msg("tengoTuPizza"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    update(ob);
    update(f);
    insert(ob1);
    retract(notif);
    
    pizza.setNombrePizza(msgg);
    System.out.println(pizza);
    
    update(pizza);
end

/*rule "Obtiene nombre de pizza de la casa dos notificaciones"
salience 100
 when
    notif:Notificacion(tipoNotificacion == tipoNotif.pizzas, msgg:mensajeNotificacion)
    notif2:Notificacion(tipoNotificacion == tipoNotif.salsas, msgg2:mensajeNotificacion)
    obGeneral:ObtenerPedidoPizza(state == SOLVING)
    ob:MostrarCarta(state == PENDING)
    f: FocoUsuario(foco == ob)
    pizza:Pizza()
 then
 	ob.setSolved();
 	Objetivo ob1 = new SolicitarTamanio();
 	f.setFoco(ob1);
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoPizzero.class);
    tarea.ejecutar("", ConversacionPizzero.msg("tengoTuPizza"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    pizza.setNombrePizza(msgg);
    System.out.println(pizza);
    update(ob);
    update(f);
    update(pizza);
    insert(ob1);	
    retract(notif2);
    System.out.println("Retract notif2");
    retract(notif);
    System.out.println("Retract notif");
end*/


rule "Obtiene nombre de pizza de la casa incorrecto"
 when
    notif:Notificacion(group:identNotificador, tipoNotificacion != tipoNotif.pizzas)
    obGeneral:ObtenerPedidoPizza(state == SOLVING)
    ob:MostrarCarta(state == PENDING)
    f: FocoUsuario(foco == ob)
 then
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoPizzero.class);
    tarea.ejecutar(group, ConversacionPizzero.msg("nombrePizzaIncorrecto"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    retract(notif);
end

rule "Solicitar salsa de la pizza"
 when
 	obGeneral:ObtenerPedidoPizza(group:objectReferenceId, state == SOLVING)
    ob1:ObtenerSalsa(state == PENDING)
    f: FocoUsuario(foco == ob1) 
 then
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoPizzero.class);
    tarea.ejecutar(group, ConversacionPizzero.msg("solicitarSalsas"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end


rule "Obtiene salsa de la pizza 2"
salience 5
 when
    notif:Notificacion(group:identNotificador, tipoNotificacion == tipoNotif.salsas, msgg:mensajeNotificacion)
    notif2:Notificacion(group2:identNotificador, tipoNotificacion == tipoNotif.pizzas, msgg2:mensajeNotificacion)
    obGeneral:ObtenerPedidoPizza(state == SOLVING)
    ob:ObtenerSalsa(state == PENDING)
    f: FocoUsuario(foco == ob)
    pizza:Pizza()
 then
 	ob.setSolved();
 	Objetivo ob1 = new SolicitarTamanio();
 	ob1.setobjectReferenceId(group);
 	f.setFoco(ob1);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    pizza.setSalsa(msgg);
    pizza.setPrecio(6);
   	update(ob);
    update(f);
    update(pizza);
    insert(ob1);
    retract(notif2);
    retract(notif);
end

rule "Obtiene salsa de la pizza"
 when
    notif:Notificacion(group:identNotificador, tipoNotificacion == tipoNotif.salsas, msgg:mensajeNotificacion)
    obGeneral:ObtenerPedidoPizza(state == SOLVING)
    ob:ObtenerSalsa(state == PENDING)
    f: FocoUsuario(foco == ob)
    pizza:Pizza()
 then
 	ob.setSolved();
 	Objetivo ob1 = new SolicitarTamanio();
 	ob1.setobjectReferenceId(group);
 	f.setFoco(ob1);
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoPizzero.class);
    tarea.ejecutar("", ConversacionPizzero.msg("tengoTuSalsa"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    pizza.setSalsa(msgg);
    pizza.setPrecio(6);
   	update(ob);
    update(f);
    update(pizza);
    insert(ob1);
    retract(notif);
end

rule "Obtiene salsa de la pizza incorrecto"
 when
    notif:Notificacion(group:identNotificador, tipoNotificacion != tipoNotif.salsas, tipoNotificacion != tipoNotif.ingredientes, msgg:mensajeNotificacion)
    obGeneral:ObtenerPedidoPizza(state == SOLVING)
    ob:ObtenerSalsa(state == PENDING)
    f: FocoUsuario(foco == ob)
    pizza:Pizza()
 then
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoPizzero.class);
    tarea.ejecutar(group, ConversacionPizzero.msg("nombreSalsaIncorrecto"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    retract(notif);
end

rule "Solicitar tamaño de pizza"
 when
 	obGeneral:ObtenerPedidoPizza(group:objectReferenceId, state == SOLVING)
    ob1:SolicitarTamanio(state == PENDING)
    f: FocoUsuario(foco == ob1)
 then
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoPizzero.class);
    tarea.ejecutar(group, ConversacionPizzero.msg("solicitarTamanioPizza"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end


rule "Obtiene tamaño de la pizza"
 when
    notif:Notificacion(group:identNotificador, tipoNotificacion == tipoNotif.tamanyopizza, msgg:mensajeNotificacion)
    obGeneral:ObtenerPedidoPizza(state == SOLVING)
    ob:SolicitarTamanio(state == PENDING)
    f: FocoUsuario(foco == ob)
    pizza:Pizza()
 then
 	ob.setSolved();
 	Objetivo ob1 = new SolicitarMasa();
 	ob1.setobjectReferenceId(group);
 	f.setFoco(ob1);
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoPizzero.class);
    tarea.ejecutar(group, ConversacionPizzero.msg("solicitarMasaPizza"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    update(ob);
    update(f);
    insert(ob1);
    retract(notif);
    
    if(msgg.equalsIgnoreCase("pequeña") || msgg.equalsIgnoreCase("pequenya")){
    	pizza.setTamanio(TamanioPizza.pequenia);
    	pizza.setPrecio(6);
    }else if(msgg.equalsIgnoreCase("mediana")){
    	pizza.setTamanio(TamanioPizza.mediana);
    	pizza.setPrecio(8);
    }else if(msgg.equalsIgnoreCase("grande") || msgg.equalsIgnoreCase("familiar")){
    	pizza.setTamanio(TamanioPizza.familiar);
    	pizza.setPrecio(11);
    }
    
    System.out.println(pizza);
    System.out.println(msgg);
    
    
    update(pizza);
end

rule "Obtiene tamaño de la pizza incorrecto"
 when
    notif:Notificacion(group:identNotificador, tipoNotificacion != tipoNotif.tamanyopizza, msgg:mensajeNotificacion)
    obGeneral:ObtenerPedidoPizza(state == SOLVING)
    ob:SolicitarTamanio(state == PENDING)
    f: FocoUsuario(foco == ob)
 then
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoPizzero.class);
    tarea.ejecutar(group, ConversacionPizzero.msg("tipoTamanioIncorrecto"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    retract(notif);
end

rule "Obtiene masa de la pizza"
 when
    notif:Notificacion(group:identNotificador, tipoNotificacion == tipoNotif.masapizza, msgg:mensajeNotificacion)
    obGeneral:ObtenerPedidoPizza(state == SOLVING)
    ob:SolicitarMasa(state == PENDING)
    f: FocoUsuario(foco == ob)
    pizza:Pizza()
    p: Pedido()
 then
 	ob.setSolved();
 	Objetivo ob1 = new ObtenerPizzasPendientes();
 	ob1.setobjectReferenceId(group);
 	f.setFoco(ob1);
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoPizzero.class);
    tarea.ejecutar(group, ConversacionPizzero.msg("tengoTuMasa"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    update(ob);
    update(f);
    insert(ob1);
    retract(notif);
    
    if(msgg.equalsIgnoreCase("normal")){
    	pizza.setMasa(MasaPizza.normal);
    }else if(msgg.equalsIgnoreCase("fina") || msgg.equalsIgnoreCase("delgada")){
    	pizza.setMasa(MasaPizza.fina);
    }else{
    	pizza.setMasa(MasaPizza.queso);
    }
    
    p.addPizza(pizza);
    System.out.println(pizza);
    
    update(p);
    retract(pizza);    
end

rule "Obtiene masa de la pizza incorrecta"
 when
    notif:Notificacion(group:identNotificador, tipoNotificacion != tipoNotif.masapizza)
    obGeneral:ObtenerPedidoPizza(state == SOLVING)
    ob:SolicitarMasa(state == PENDING)
    f: FocoUsuario(foco == ob)
 then
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoPizzero.class);
    tarea.ejecutar(group, ConversacionPizzero.msg("masaIncorrecta"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    retract(notif);
end

rule "Regla de verificar numero de pizzas"
 when
 	obGeneral:ObtenerPedidoPizza(group:objectReferenceId, state == SOLVING)
 	ob:ObtenerPizzasPendientes(state == PENDING)
 	f: FocoUsuario(foco == ob) 
 	p: Pedido()
 then
 	ob.setSolved();
 	
 	if(p.numeroPizzas==1){
 		 obGeneral.setSolved();
 		 update(obGeneral);
 	}else{
 		p.numeroPizzas= p.numeroPizzas-1;
 		p.numeroTotalPizzas = p.numeroTotalPizzas + 1;
 		Objetivo ob1 = new ObtenerTipoPizza();
 		ob1.setobjectReferenceId(group);
 		f.setFoco(ob1);
    	update(f);
    	insert(ob1);
 	}
	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
	update(ob);
end

rule "Enviar mensaje al agente contexto cuando acaba el agente pizzero"
when
 	obGeneral:ObtenerPedidoPizza(group:objectReferenceId, state == Objetivo.SOLVED)
 	p:Pedido()
then
	InterfazUsoAgente iftAgente = (InterfazUsoAgente)NombresPredefinidos.
  		REPOSITORIO_INTERFACES_OBJ.obtenerInterfaz(NombresPredefinidos.ITF_USO + VocabularioGestionPizzeria.IdentAgenteContexto);
  	Notificacion notifPide = new Notificacion(agentId);
  	notifPide.setTipoNotificacion(tipoNotif.pideBebida);
  	notifPide.setMensajeNotificacion("El agente pizzero ha terminado ");
   	// MensajeSimple mensaje = new MensajeSimple(notifPide, VocabularioGestionPizzeria.IdentAgentePizzero, VocabularioGestionPizzeria.IdentAgenteContexto);
   	MensajeSimple mensaje = new MensajeSimple(p, VocabularioGestionPizzeria.IdentAgentePizzero, VocabularioGestionPizzeria.IdentAgenteContexto);
   	System.out.println(mensaje);
   	iftAgente.aceptaMensaje(mensaje);
end

