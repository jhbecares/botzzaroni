import icaro.infraestructura.recursosOrganizacion.recursoTrazas.ItfUsoRecursoTrazas;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.imp.componentes.InfoTraza;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.*;
import icaro.infraestructura.patronAgenteCognitivo.procesadorObjetivos.gestorTareas.ItfGestorTareas;
import icaro.infraestructura.entidadesBasicas.PerformativaUsuario;
import icaro.infraestructura.entidadesBasicas.comunicacion.*
import icaro.aplicaciones.agentes.AgenteAplicacionCalendario.objetivos.*;

import icaro.aplicaciones.informacion.gestionPizzeria.*;
import icaro.aplicaciones.agentes.AgenteAplicacionCalendario.tareas.*;
import icaro.aplicaciones.agentes.AgenteAplicacionCalendario.tools.*;

import icaro.infraestructura.entidadesBasicas.interfaces.InterfazUsoAgente;
import icaro.infraestructura.entidadesBasicas.NombresPredefinidos;
import icaro.infraestructura.entidadesBasicas.comunicacion.MensajeSimple;

import java.util.concurrent.TimeUnit;

global ItfGestorTareas gestorTareas;
global ItfUsoRecursoTrazas recursoTrazas;
global String agentId;

rule "Creacion de los objetivos iniciales"
when 
then 
	TareaSincrona tarea = gestorTareas.crearTareaSincrona(InicializarInfoWorkMem.class);
    tarea.ejecutar();
	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end


rule "Peticion fecha calendario"
when
	notif:Notificacion(identInterlc:identNotificador, tipoNotificacion == tipoNotif.pideCalendario)
then
	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(identInterlc,ConversacionCalendario.msg("peticionCalendario"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());

	Objetivo obGeneral = new ObtenerEntrega();
    insert(obGeneral);
    
  	FocoUsuario fc = new FocoUsuario(identInterlc);
  	fc.setFoco(obGeneral);	
  	insert(fc);

end

// Reglas auxiliares calendario
rule "Notificacion calendario fecha"
salience 1000
when 
	notif:Notificacion(identInterlc:identNotificador, tipoNotificacion == tipoNotif.TempDate)
then
	System.out.println("reconocida FECHA");
	System.out.println("uee: " + notif.getMensajeNotificacion());
	
	retract(notif);
end

rule "Notificacion calendario hora"
salience 1000
when 
	notif:Notificacion(identInterlc:identNotificador, tipoNotificacion == tipoNotif.TempTime)
	//user:Usuario()
	// FIXME el nombre del usuario no lo tiene
then
	System.out.println("reconocida HORA");
	System.out.println("uee: " + notif.getMensajeNotificacion());
	
	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(identInterlc,ConversacionCalendario.msg("reconocidaHora"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
	
	
	retract(notif);
end

rule "Notificacion calendario año"
salience 1000
when 
	notif:Notificacion(identInterlc:identNotificador, tipoNotificacion == tipoNotif.TempYear)
then
	System.out.println("reconocido AÑO");
	System.out.println("uee: " + notif.getMensajeNotificacion());
	
	retract(notif);
end

rule "Notificacion calendario numero"
salience 1000
when 
	notif:Notificacion(identInterlc:identNotificador, tipoNotificacion == tipoNotif.numero)
then

	System.out.println("reconocido NUMERO");
	System.out.println("uee: " + notif.getMensajeNotificacion());
	System.out.println(notif.getTipoNotificacion());
	
	retract(notif);
end

rule "Notificacion nombre pizza personalizada"
salience 1000
when 
	notif:Notificacion(identInterlc:identNotificador, tipoNotificacion == tipoNotif.NombrePizzaPersonalizada)
then

	System.out.println("reconocido nombre pizza personalizada");
	System.out.println("uee: " + notif.getMensajeNotificacion());
	System.out.println(notif.getTipoNotificacion());
	
	retract(notif);
end
