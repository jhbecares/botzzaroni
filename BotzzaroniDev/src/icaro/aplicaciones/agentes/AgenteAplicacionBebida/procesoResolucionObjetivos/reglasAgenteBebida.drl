import icaro.infraestructura.recursosOrganizacion.recursoTrazas.ItfUsoRecursoTrazas;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.imp.componentes.InfoTraza;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.*;
import icaro.infraestructura.patronAgenteCognitivo.procesadorObjetivos.gestorTareas.ItfGestorTareas;
import icaro.infraestructura.entidadesBasicas.PerformativaUsuario;
import icaro.infraestructura.entidadesBasicas.comunicacion.*
import icaro.aplicaciones.agentes.AgenteAplicacionBebida.objetivos.*;

import icaro.aplicaciones.informacion.gestionPizzeria.*;
import icaro.aplicaciones.agentes.AgenteAplicacionBebida.tareas.*;
import icaro.aplicaciones.agentes.AgenteAplicacionBebida.tools.*;

import icaro.infraestructura.entidadesBasicas.interfaces.InterfazUsoAgente;
import icaro.infraestructura.entidadesBasicas.NombresPredefinidos;
import icaro.infraestructura.entidadesBasicas.comunicacion.MensajeSimple;

global ItfGestorTareas gestorTareas;
global ItfUsoRecursoTrazas recursoTrazas;
global String agentId;


// "usuario" es el nombre del usuario del chat.


rule "Creacion de los objetivos iniciales"
when 
then 
	TareaSincrona tarea = gestorTareas.crearTareaSincrona(InicializarInfoWorkMem.class);
    tarea.ejecutar();
	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end


rule "Preguntar si quiere bebida"
salience 100
when 
	// notif:Notificacion(identInterlc:identNotificador, tipoNotificacion == tipoNotif.pideBebida)
	p:Pedido()
    not( exists (FocoUsuario()))
then 
	Objetivo obGeneral = new ObtenerBebidas();
    // obGeneral.setobjectReferenceId(identInterlc);
    insert(obGeneral);
    
    Objetivo ob = new PreguntarBebidas();
  	// ob.setobjectReferenceId(identInterlc);
  	insert(ob); 
  	
  	FocoUsuario fc = new FocoUsuario(p.getUsuario().getUsername());
  	fc.setFoco(ob);	
  	insert(fc);
  	
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(p.getUsuario().getUsername(),ConversacionBebida.msg("preguntarBebidas"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    	 	
   	// retract(notif);
end

rule "Quiere bebida" 
 when
  	notif:Notificacion(group:identNotificador, tipoNotificacion == tipoNotif.si)
 	obGeneral:ObtenerBebidas( state == Objetivo.PENDING)
 	ob:PreguntarBebidas(state == Objetivo.PENDING)
 	fc:FocoUsuario( foco == ob )
 	p:Pedido()
 then   
 	
 	ob.setSolved();
 	update(ob);
      
    Objetivo ob1 = new ObtenerNumeroBebidasTotales();
  	ob1.setobjectReferenceId(group);
  	insert(ob1); 
  	
  	fc.setFoco(ob1);
  	update(fc);
  	
   	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
   	tarea.ejecutar(group,ConversacionBebida.msg("cartaBebida"));
    tarea.ejecutar(group,ConversacionBebida.msg("preguntarNumeroBebidas"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
	 
   	retract(notif);
end


rule "No quiere bebida" 
 when
  	notif:Notificacion(group:identNotificador, tipoNotificacion == tipoNotif.no)
 	obGeneral:ObtenerBebidas(state == Objetivo.PENDING)
 	ob:PreguntarBebidas(state == Objetivo.PENDING)
 	fc:FocoUsuario(foco == ob)
 	p:Pedido()
 then   
 	ob.setSolved();
 	update(ob);
 	
 	obGeneral.setSolved();
 	update(obGeneral);

    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(group,ConversacionBebida.msg("noQuiereBebidas"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    
    retract(notif);
end


rule "No se sabe si quiere bebida" 
 when
  	notif:Notificacion(group:identNotificador, tipoNotificacion != tipoNotif.si && tipoNotificacion != tipoNotif.no)
 	obGeneral:ObtenerBebidas( state == Objetivo.PENDING)
 	ob:PreguntarBebidas(state == Objetivo.PENDING)
 	fc:FocoUsuario(foco == ob )
 then   
   	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(group,ConversacionBebida.msg("noSabeSiQuiereBebidas"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
	 	
   	retract(notif);
end

rule "Introduce numero y bebida juntos en objetivo numero bebidas totales"
 salience 30 
 when 
 	notif:Notificacion(group:identNotificador, tipoNotificacion == tipoNotif.numero, msggNumero:mensajeNotificacion)
 	notif1:Notificacion(group1:identNotificador, tipoNotificacion == tipoNotif.bebidas, msggBebida:mensajeNotificacion)
 	obGeneral:ObtenerBebidas( state == Objetivo.PENDING)
 	ob:ObtenerNumeroBebidasTotales(state == Objetivo.PENDING)
 	fc:FocoUsuario( foco == ob )
 	pedido1:Pedido()
 then
 	pedido1.setnBebidas(msggNumero);
 	for(int i = 0; i < Integer.parseInt(msggNumero); i++){
 		
 		if(msggBebida.equalsIgnoreCase("cocacola") || msggBebida.equalsIgnoreCase("coca-cola") || msggBebida.equalsIgnoreCase("coca cola")
	 		|| msggBebida.equalsIgnoreCase("cocacolas") || msggBebida.equalsIgnoreCase("coca-colas") || msggBebida.equalsIgnoreCase("coca colas")
	 		|| msggBebida.equalsIgnoreCase("cocacola light") || msggBebida.equalsIgnoreCase("coca-cola light") || msggBebida.equalsIgnoreCase("coca cola light")
	 		|| msggBebida.equalsIgnoreCase("cocacola zero") || msggBebida.equalsIgnoreCase("coca-cola zero") || msggBebida.equalsIgnoreCase("coca cola zero") ){
 				pedido1.anadirBebida("cocacola");
 		}
 		else if(msggBebida.equalsIgnoreCase("fanta de naranja") || msggBebida.equalsIgnoreCase("fanta naranja") || msggBebida.equalsIgnoreCase("fanta") || msggBebida.equalsIgnoreCase("fantas")){
 		 	pedido1.anadirBebida("fanta de naranja");
 		}
 		else if(msggBebida.equalsIgnoreCase("fanta de limon") || msggBebida.equalsIgnoreCase("fanta limon") || msggBebida.equalsIgnoreCase("fanta de lim贸n") || msggBebida.equalsIgnoreCase("fanta lim贸n")){
 		 	pedido1.anadirBebida("fanta de limon");
 		}
 		else if(msggBebida.equalsIgnoreCase("nestea") || msggBebida.equalsIgnoreCase("nesti") || msggBebida.equalsIgnoreCase("nesty")){
 		 	pedido1.anadirBebida("nestea");
 		}
 		else if(msggBebida.equalsIgnoreCase("cerveza") || msggBebida.equalsIgnoreCase("cerveza sin alcohol") || msggBebida.equalsIgnoreCase("cerveza con limon")
 		 || msggBebida.equalsIgnoreCase("cerveza limon") || msggBebida.equalsIgnoreCase("cerveza con lim贸n") || msggBebida.equalsIgnoreCase("cerveza lim贸n")){
 		 	pedido1.anadirBebida("cerveza");
 		}
 		
 		
 		 		
 	}
 	
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(group,ConversacionBebida.msg("bebidaExiste"));
    tarea.ejecutar(group,ConversacionBebida.msg("masBebidas"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
    
    Objetivo ob1 = new SaberSiQuiereMasBebidas();
  	ob1.setobjectReferenceId(group);
  	insert(ob1); 
  	
  	fc.setFoco(ob1);
  	update(fc);
  	
  	update(pedido1);
    
    ob.setSolved();
 	update(ob);
 	
    retract(notif);
    retract(notif1);
end 	

/*
rule "Introduce numero y no bebida"
 salience 20 
 when 
 	notif:Notificacion(group:identNotificador, tipoNotificacion == tipoNotif.numero, msggNumero:mensajeNotificacion)
 	notif1:Notificacion(group1:identNotificador, tipoNotificacion != tipoNotif.bebidas, tipoNotificacion != tipoNotif.numero, msggBebida:mensajeNotificacion)
 	obGeneral:ObtenerBebidas( state == Objetivo.PENDING)
 	ob:ObtenerNumeroBebidasTotales(state == Objetivo.PENDING)
 	fc:FocoUsuario( foco == ob )
 	pedido1:Pedido()
 then
 	
 	pedido1.setnBebidas(msggNumero);
 	
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(group,"Por favor introduce una bebida valida");
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());

	/*Objetivo ob1 = new ObtenerNombreBebida();
  	ob1.setobjectReferenceId(group);
  	insert(ob1); 
  	
  	fc.setFoco(ob1);
  	update(fc);

    retract(notif);
    
end 	


rule "Introduce bebida y no numero"
 salience 20 
 when 
 	notif:Notificacion(group:identNotificador, tipoNotificacion == tipoNotif.bebidas, msggBebida:mensajeNotificacion)
 	notif1:Notificacion(group1:identNotificador, tipoNotificacion != tipoNotif.numero)
 	obGeneral:ObtenerBebidas( state == Objetivo.PENDING)
 	ob:ObtenerNumeroBebidasTotales(state == Objetivo.PENDING)
 	fc:FocoUsuario( foco == ob )
 	pedido1:Pedido()
 then
 	
 	pedido1.anadirBebida(msggBebida);
 	
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(group,"Por favor introduce la cantidad de esa bebida");
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());

	/*Objetivo ob1 = new ObtenerNumeroBebidaEspecifica();
  	ob1.setobjectReferenceId(group);
  	insert(ob1); 
  	
  	fc.setFoco(ob1);
  	update(fc);

    retract(notif);
    
end */



/*rule "Si quiere mas bebidas y llega bebidas"
 when 
 	notif:Notificacion(group:identNotificador, tipoNotificacion == tipoNotif.numero, msggNumero:mensajeNotificacion)
 	notif1:Notificacion(group1:identNotificador, tipoNotificacion == tipoNotif.bebidas, msggBebida:mensajeNotificacion)
 	obGeneral:ObtenerBebidas( state == Objetivo.PENDING)
 	ob:SaberSiQuiereMasBebidas(state == Objetivo.PENDING)
 	fc:FocoUsuario( foco == ob )
 	pedido1:Pedido()
 then
 	
 	pedido1.setnBebidas(msggNumero);
 	for(int i = 0; i < Integer.parseInt(msggNumero); i++){
 		pedido1.anadirBebida(msggBebida);
 	}
 	
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(group,ConversacionBebida.msg("bebidaExiste"));
    tarea.ejecutar(group,ConversacionBebida.msg("masBebidas"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   
    retract(notif);
    retract(notif1);
end 	*/


rule "Si quiere mas bebidas"
 when 
 	notif:Notificacion(group:identNotificador, tipoNotificacion == tipoNotif.si)
 	obGeneral:ObtenerBebidas( state == Objetivo.PENDING)
 	ob:SaberSiQuiereMasBebidas(state == Objetivo.PENDING)
 	fc:FocoUsuario( foco == ob )
 then
 	
 	ob.setSolved();
 	update(ob);
 
 	Objetivo ob1 = new ObtenerNumeroBebidasTotales();
  	ob1.setobjectReferenceId(group);
  	insert(ob1); 
  	
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(group,"Que otra bebida deseas?");
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
  	
  	fc.setFoco(ob1);
  	update(fc);
  	retract(notif);
end 	


rule "No quiere mas bebidas"
 when 
 	notif:Notificacion(group:identNotificador, tipoNotificacion == tipoNotif.no)
 	obGeneral:ObtenerBebidas( state == Objetivo.PENDING)
 	ob:SaberSiQuiereMasBebidas(state == Objetivo.PENDING)
 	fc:FocoUsuario( foco == ob )
 then
 	
 	obGeneral.setSolved();
 	update(obGeneral);
 	
 	ob.setSolved();
 	update(ob);
  	
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(group,"Pues vayamos con el pago :)");
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());

  	retract(notif);
end 


rule "No se sabe si quiere mas bebidas"
 when 
 	notif:Notificacion(group:identNotificador, tipoNotificacion != tipoNotif.si && tipoNotificacion != tipoNotif.no)
 	obGeneral:ObtenerBebidas( state == Objetivo.PENDING)
 	ob:SaberSiQuiereMasBebidas(state == Objetivo.PENDING)
 	fc:FocoUsuario( foco == ob )
 then
 	  	
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(group,ConversacionBebida.msg("noSeSabeSiQuiereMas"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());

  	retract(notif);
end 


rule "Enviar mensaje al agente contexto cuando acaba el agente bebida"
when
 	obGeneral:ObtenerBebidas( state == Objetivo.SOLVED)
 	p:Pedido()
then
	InterfazUsoAgente iftAgente = (InterfazUsoAgente)NombresPredefinidos.
  		REPOSITORIO_INTERFACES_OBJ.obtenerInterfaz(NombresPredefinidos.ITF_USO + VocabularioGestionPizzeria.IdentAgenteContexto);
  	Notificacion notifPide = new Notificacion(agentId);
  	notifPide.setTipoNotificacion(tipoNotif.pidePago);
  	notifPide.setMensajeNotificacion("El agente bebida ha terminado ");
   	// MensajeSimple mensaje = new MensajeSimple(notifPide, VocabularioGestionPizzeria.IdentAgenteBebida, VocabularioGestionPizzeria.IdentAgenteContexto);
   	MensajeSimple mensaje = new MensajeSimple(p, VocabularioGestionPizzeria.IdentAgenteBebida, VocabularioGestionPizzeria.IdentAgenteContexto);
   	
   	System.out.println(mensaje);
   	iftAgente.aceptaMensaje(mensaje);
end

