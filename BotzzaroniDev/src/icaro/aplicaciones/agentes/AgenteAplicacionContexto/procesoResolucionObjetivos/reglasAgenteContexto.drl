import icaro.infraestructura.recursosOrganizacion.recursoTrazas.ItfUsoRecursoTrazas;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.imp.componentes.InfoTraza;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.*;
import icaro.infraestructura.patronAgenteCognitivo.procesadorObjetivos.gestorTareas.ItfGestorTareas;
import icaro.infraestructura.entidadesBasicas.PerformativaUsuario;
import icaro.infraestructura.entidadesBasicas.comunicacion.*
import icaro.aplicaciones.agentes.AgenteAplicacionContexto.objetivos.*;

import icaro.aplicaciones.informacion.gestionPizzeria.*;
import icaro.aplicaciones.agentes.AgenteAplicacionContexto.tareas.*;
import icaro.aplicaciones.agentes.AgenteAplicacionContexto.tools.*;

global ItfGestorTareas gestorTareas;
global ItfUsoRecursoTrazas recursoTrazas;
global String agentId;


// "usuario" es el nombre del usuario del chat.


rule "Creacion de los objetivos iniciales"
when 
then 
TareaSincrona tarea = gestorTareas.crearTareaSincrona(InicializarInfoWorkMem.class);
    tarea.ejecutar();
	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
	 
end

rule "Regla de focalizacion en objetivo CrearChatUsuario"
 when
    f:Focus(foco == null )
    obj:CrearChatUsuario()
 then
    f.setFoco(obj);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
    update(f);
end

rule "Inicio del proceso de consecucion del  objetivo CrearChatUsuario"
  when
    obj:CrearChatUsuario(state==Objetivo.PENDING)
    Focus(foco ==obj)
  then
    obj.setSolving();
    update(obj);
end

rule "Crear Chat Usuario y mostrarselo"
   when
    obj:CrearChatUsuario(state==Objetivo.SOLVING)
    f:Focus(foco == obj)
    notif:Notificacion(tipoNotificacion == VocabularioGestionPizzeria.ResultadoAutenticacion_DatosValidos )
   then
    recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Se ejecuta la tarea : MostrarChatUsuario",InfoTraza.NivelTraza.debug));
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MostrarChatUsuario.class);
    tarea.ejecutar(VocabularioGestionPizzeria.IdentRecursoComunicacionChat, notif.getMensajeNotificacion());
    recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Realizando el objetivo : "+obj.getgoalId()+"  Ejecutando la tarea : "+ tarea.getIdentTarea() ,InfoTraza.NivelTraza.debug));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
    retract(notif);
    obj.setSolved();
    update(obj);
end

rule "Regla de focalizacion en objetivo SaludarConocer"
 when
 	objA:CrearChatUsuario(state == Objetivo.SOLVED)
    f:Focus(foco == objA)
    obj:SaludarConocer()
 then
    f.setFoco(obj);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
    update(f);
end

rule "Inicio del proceso de consecucion del  objetivo SaludarConocer"
  when
    obj:SaludarConocer(state==Objetivo.PENDING)
    Focus(foco ==obj)
  then
    obj.setSolving();
    update(obj);
end

rule "Distribuir mensaje al agente identificador"
 when
    obj:SaludarConocer(state==Objetivo.SOLVING)
    f:Focus(foco == obj)
    notif:Notificacion()
  then
   	 recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
     Tarea tarea = gestorTareas.crearTarea(Distribuir.class);
     tarea.ejecutar(notif, VocabularioGestionPizzeria.IdentAgenteIdentificadorBotzza);
     retract(notif);
     update(f);
     update(obj);
 end

/*
rule "Respuesta ante resaludo del grupo conocido"
 when
    notif:Notificacion(identInterlc:identNotificador, tipoNotificacion == tipoNotif.saludo)
 then
  	 TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
     tarea.ejecutar(identInterlc,ConversacionBotzza.msg("volverASaludar"));
     recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
     retract(notif);
end

rule "Notificar desconocimiento"
 when
    notif:Notificacion(tipoNotificacion == VocabularioGestionPizzeria.ExtraccionSemanticaNull )
 then
  TareaSincrona tarea = gestorTareas.crearTareaSincrona(ContestarUsuario.class);
    tarea.ejecutar(VocabularioGestionPizzeria.IdentRecursoComunicacionChat, notif.getMensajeNotificacion());
    retract(notif);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

*/

