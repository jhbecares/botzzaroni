import icaro.infraestructura.recursosOrganizacion.recursoTrazas.ItfUsoRecursoTrazas;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.imp.componentes.InfoTraza;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.*;
import icaro.infraestructura.patronAgenteCognitivo.procesadorObjetivos.gestorTareas.ItfGestorTareas;
import icaro.infraestructura.entidadesBasicas.PerformativaUsuario;
import icaro.infraestructura.entidadesBasicas.comunicacion.*
import icaro.aplicaciones.agentes.AgenteAplicacionIdentificadorBotzza.objetivos.*;

import icaro.aplicaciones.agentes.AgenteAplicacionIdentificadorBotzza.tareas.*;
import icaro.aplicaciones.agentes.AgenteAplicacionIdentificadorBotzza.tools.*;
import icaro.aplicaciones.informacion.gestionPizzeria.*;
import icaro.aplicaciones.agentes.AgenteAplicacionPizzero.objetivos.*;
import icaro.infraestructura.entidadesBasicas.interfaces.InterfazUsoAgente;
import icaro.infraestructura.entidadesBasicas.NombresPredefinidos;
import icaro.infraestructura.entidadesBasicas.comunicacion.MensajeSimple;

global ItfGestorTareas gestorTareas;
global ItfUsoRecursoTrazas recursoTrazas;
global String agentId;


// "grupo" es el nombre del usuario del chat.

rule "Creacion de los objetivos iniciales"
when 
then 
	TareaSincrona tarea = gestorTareas.crearTareaSincrona(InicializarInfoWorkMem.class);
    tarea.ejecutar();
	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end

/*
rule "Saludo Inicial"
when
then
     TareaSincrona tarea = gestorTareas.crearTareaSincrona(SaludoInicial.class);
     tarea.ejecutar(VocabularioGestionPizzeria.IdentRecursoComunicacionChat);
     recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end


rule "Saludo inicial cuando el grupo dice algo que no es un saludo"
 when
    notif:Notificacion(identInterlc:identNotificador, tipoNotificacion != tipoNotif.saludo)
    not( exists (Usuario(username == identInterlc )))
 then
 	Usuario gr = new Usuario();
 	gr.username = identInterlc;
 	insert( gr );
 	FocoUsuario fgr = new FocoUsuario(identInterlc);
 	Objetivo ob = new ObtenerInfoUsuario();
 	ob.setobjectReferenceId(identInterlc);
 	insert( fgr );
 	insert( ob );
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(identInterlc,ConversacionBotzza.msg("saludoInicialNoSaludo"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    retract(notif);
end

rule "Saludo inicial cuando el grupo saluda y no se conoce"
 when
    notif:Notificacion(identInterlc:identNotificador, tipoNotificacion == tipoNotif.saludo)
    not( exists (Usuario(username == identInterlc )))
 then
 	Usuario gr = new Usuario();
 	gr.username = identInterlc;
 	insert( gr );
 	FocoUsuario fgr = new FocoUsuario(identInterlc);
 	Objetivo ob = new ObtenerInfoUsuario();
 	ob.setobjectReferenceId(identInterlc);
 	insert( fgr );
 	insert( ob );
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(identInterlc,ConversacionBotzza.msg("saludoInicialDesconocido"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    retract(notif);
end

rule "Saludo inicial cuando el grupo saluda y se conoce"
 when
    notif:Notificacion(identInterlc:identNotificador, tipoNotificacion == tipoNotif.saludo)
   	gr:Usuario(username == identInterlc)
 then
 	FocoUsuario fgr = new FocoUsuario(identInterlc);
 	Objetivo ob = new ObtenerInfoUsuario();
 	ob.setobjectReferenceId(identInterlc);
 	insert( fgr );
 	insert( ob );
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(identInterlc,ConversacionBotzza.msg("saludoInicial"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    retract(notif);
end


rule "Respuesta ante resaludo del grupo conocido"
 when
    notif:Notificacion(identInterlc:identNotificador, tipoNotificacion == tipoNotif.saludo)
   	gr:Usuario(username == identInterlc)
 then
  	 TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
     tarea.ejecutar(identInterlc,ConversacionBotzza.msg("volverASaludar"));
     recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
     gr.actividad();
     retract(notif);
end

*/

rule "Notificar desconocimiento"
 when
 	notif:Notificacion(group:identNotificador, tipoNotificacion == VocabularioGestionPizzeria.ExtraccionSemanticaNull )
	gr:Usuario(username == group)
 then
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(group,ConversacionBotzza.msg("desconocido"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    gr.actividad();
    retract(notif);
end

rule "Despedirse"
	when 
	 notif:Notificacion(identInterlc:identNotificador, tipoNotificacion == tipoNotif.despedida)
 	 gr:Usuario(username == identInterlc )
	 then
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());
	// TODO eliminar sesion ?
   TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
     tarea.ejecutar(gr.username,  ConversacionBotzza.msg("despedida"));
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   
   retract( notif );
end

////////////////////////////



rule "Regla de saludar al usuario en funci√≥n de si es conocido o no"
 when
    notif:Notificacion(tipoNotificacion == tipoNotif.saludar, msgg:mensajeNotificacion)
 then 
  	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());  	
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(SaludoInicial.class);  	
    tarea.ejecutar();
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	retract(notif);
   	Objetivo obGeneral = new ObtenerInfoUsuario();
   	insert(obGeneral);
end

rule "Preguntar si quiere usar la misma direccion siendo usuario conocido"
when
	obG:ObtenerInfoUsuario(state == Objetivo.PENDING)
	obj:ConfirmarDireccion(state == Objetivo.PENDING)
    f:Focus(foco == obj)
	user: Usuario()
then 
	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("solicitaConfirmarDireccion"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	
   	TareaSincrona tarea2 = gestorTareas.crearTareaSincrona(MostrarDireccion.class);
   	tarea2.ejecutar(user);
end

rule "Regla de solicitar confirmar direccion cuando no dice ni que si ni que no"
 when
 	obG:ObtenerInfoUsuario(state == Objetivo.PENDING)
	obj:ConfirmarDireccion(state == Objetivo.PENDING)
    f:Focus(foco == obj)
	user: Usuario()
	notif:Notificacion(tipoNotificacion != tipoNotif.si && tipoNotificacion != tipoNotif.no, msgg:mensajeNotificacion )
 then
 
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("solicitarConfirmarDireccionImperativo"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
  	 
   	retract(notif);
end

rule "Regla obtener confirmar direccion afirmativa para usuario conocido"
when
	obG:ObtenerInfoUsuario(state == Objetivo.PENDING)
	obj:ConfirmarDireccion(state == Objetivo.PENDING)
    f:Focus(foco == obj)
	user: Usuario()
	notif:Notificacion(tipoNotificacion == tipoNotif.si, msgg:mensajeNotificacion )
then 
	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("direccionConfirmada"));
	// Actualizo el objetivo general a resuelto y he acabado
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	obG.setSolved();
   	obj.setSolved();
   	f.setFoco(obG);
   	update(f);
   	update(obj);
   	update(obG);
   	retract(notif);
end

rule "Regla obtener confirmar direccion negativo para usuario conocido"
when
	obG:ObtenerInfoUsuario(state == Objetivo.PENDING)
	obj:ConfirmarDireccion(state == Objetivo.PENDING)
	user: Usuario()
	f:Focus(foco == obj)
	notif:Notificacion(tipoNotificacion == tipoNotif.no, msgg:mensajeNotificacion )
then 
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	Objetivo obN = new ObtenerCalle();
   	insert(obN);
   	obj.setSolved();
   	f.setFoco(obN);
   	update(f);
   	update(obj);	
   	retract(notif);
end

rule "Regla de solicitar nombre"
 when
 	obG:ObtenerInfoUsuario(state == Objetivo.PENDING)
 	obj:ObtenerNombreUsuario(state == Objetivo.PENDING)
 	user:Usuario()
 	f:Focus(foco == obj)
 then
  	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("solicitarNombre"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Regla de solicitar nombre cuando se obtiene algo que no es el nombre"
 when
 	obGeneral:ObtenerInfoUsuario(state == Objetivo.PENDING)
 	obj:ObtenerNombreUsuario(state == Objetivo.PENDING)
    notif:Notificacion(tipoNotificacion != tipoNotif.nombres, msgg:mensajeNotificacion )
    user:Usuario()
    f:Focus(foco == obj)
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("solicitarNombreImperativo"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	retract(notif);
end

rule "Regla de obtencion del nombre" 
 when
 	obGeneral:ObtenerInfoUsuario(state == Objetivo.PENDING)
 	ob:ObtenerNombreUsuario(state == Objetivo.PENDING)
    notif:Notificacion(tipoNotificacion == tipoNotif.nombres, msgg:mensajeNotificacion )
    user:Usuario()
    f:Focus(foco == ob)
 then
 	ob.setSolved();
 	user.setNombre(msgg);
 	user.actividad();
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("tengoTuNombre"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	
   	// creamos objetivo de obtener el apellido, ya que tenemos el nombre!
   	Objetivo ob2 = new ObtenerApellidoUsuario();
   	update(ob);
   	f.setFoco(ob2);
   	update(f);
   	retract(notif);
   	insert(ob2);
end

rule "Regla de solicitar apellido"
 when
 	obG:ObtenerInfoUsuario(state == Objetivo.PENDING)
 	obj:ObtenerApellidoUsuario(state == Objetivo.PENDING)
    user:Usuario()
    f:Focus(foco == obj)
 then
  	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());	
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("solicitarApellido"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Regla de solicitar el apellido cuando se obtiene algo que no es el apellido" 
 when
 	obGeneral:ObtenerInfoUsuario(state == Objetivo.PENDING)
 	obj:ObtenerApellidoUsuario(state == Objetivo.PENDING)
    notif:Notificacion(tipoNotificacion != tipoNotif.apellidos, msgg:mensajeNotificacion )
    user:Usuario()
    f:Focus(foco == obj)
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("solicitarApellidoImperativo"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	retract(notif);
end

rule "Regla de obtencion del apellido" 
 when
 	obGeneral:ObtenerInfoUsuario(state == Objetivo.PENDING)
 	obj:ObtenerApellidoUsuario(state == Objetivo.PENDING)
    notif:Notificacion(tipoNotificacion == tipoNotif.apellidos, msgg:mensajeNotificacion )
    user:Usuario()
    f:Focus(foco == obj)
 then
 	user.setApellidos(msgg);
 	user.actividad();
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("tengoTuApellido"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
  	obj.setSolved();
  	update(obj);
   	
   	Objetivo objN = new ObtenerTelefono();
   	f.setFoco(objN);
   	update(f);
   	insert(objN);   	
   	retract(notif);
end


rule "Regla de solicitar n√∫mero de tel√©fono"
 when
 	obG:ObtenerInfoUsuario(state == Objetivo.PENDING)
 	obj:ObtenerTelefono(state == Objetivo.PENDING)
 	user:Usuario()
 	f:Focus(foco == obj)
 then
  	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());  	
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("solicitaTelefono"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Regla de solicitar tel√©fono cuando se obtiene algo que no es un tel√©fono"
 when
 	obGeneral:ObtenerInfoUsuario(state == Objetivo.PENDING)
 	obj:ObtenerTelefono(state == Objetivo.PENDING)
    notif:Notificacion(tipoNotificacion != tipoNotif.telefono, msgg:mensajeNotificacion )
    user:Usuario()
    f:Focus(foco == obj)
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("peticionTelefonoImperativo"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	retract(notif);
end

rule "Regla de obtencion del tel√©fono" 
 when
 	obGeneral:ObtenerInfoUsuario(state == Objetivo.PENDING)
 	obj:ObtenerTelefono(state == Objetivo.PENDING)
    notif:Notificacion(tipoNotificacion == tipoNotif.telefono, msgg:mensajeNotificacion )
    user:Usuario()
    f:Focus(foco == obj)
 then
 	obj.setSolved();
 	user.setMovil(msgg);
 	user.actividad();
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("tengoTuTelefono"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	
   	Objetivo ob2 = new ObtenerCalle();
   	f.setFoco(ob2);
   	update(f);
   	update(obj);
   	retract(notif);
   	insert(ob2);
end

///////////////////////////////////////////////////////
/////////////////////// CALLE /////////////////////////
///////////////////////////////////////////////////////
rule "Regla de solicitar calle"
 when
 	obG:ObtenerInfoUsuario(state == Objetivo.PENDING)
 	obj:ObtenerCalle(state == Objetivo.PENDING)
 	user:Usuario()
 	f:Focus(foco == obj)
 then
  	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());  	
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("solicitaCalle"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	
   	/*
   	obGeneral.setSolved(); // FIXME esto hay que cambiarlo de sitio a donde se acabe de recopilar la informacion del usuario
   	update(obGeneral);
   	f.setFoco(obGeneral);
   	update(f);
   	*/
end

rule "Regla de solicitar calle cuando se obtiene algo que no es una calle de la lista"
 when
 	obGeneral:ObtenerInfoUsuario(state == Objetivo.PENDING)
 	obj:ObtenerCalle(state == Objetivo.PENDING)
    notif:Notificacion(tipoNotificacion != tipoNotif.calles, msgg:mensajeNotificacion )
    user:Usuario()
    f:Focus(foco == obj)
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("peticionCalleImperativo"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	retract(notif);
end

rule "Regla de obtencion de la calle" 
 when
 	obGeneral:ObtenerInfoUsuario(state == Objetivo.PENDING)
 	obj:ObtenerCalle(state == Objetivo.PENDING)
    notif:Notificacion(tipoNotificacion == tipoNotif.calles, msgg:mensajeNotificacion )
    user:Usuario()
    f:Focus(foco == obj)
 then
 	obj.setSolved();
 	
	Direccion direccion = new Direccion();
 	direccion.setNombreCalle(msgg);
 	user.setDireccion(direccion);
 	
 	
 	user.actividad();
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("tengoTuCalle"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	
   	Objetivo ob2 = new ObtenerPortal();
   	f.setFoco(ob2);
   	
   	update(f);
   	update(obj);
   	retract(notif);
   	insert(ob2);
end
///////////////////////////////////////////////////////
/////////////////// FIN CALLE /////////////////////////
///////////////////////////////////////////////////////

///////////////////////////////////////////////////////
///////////////////   PORTAL  /////////////////////////
///////////////////////////////////////////////////////

rule "Regla de solicitar portal"
 when
 	obG:ObtenerInfoUsuario(state == Objetivo.PENDING)
 	obj:ObtenerPortal(state == Objetivo.PENDING)
 	user:Usuario()
 	f:Focus(foco == obj)
 then
  	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());  	
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("solicitaPortal"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Regla de solicitar portal cuando se obtiene algo que no es un numero de portal"
 when
 	obGeneral:ObtenerInfoUsuario(state == Objetivo.PENDING)
 	obj:ObtenerPortal(state == Objetivo.PENDING)
    notif:Notificacion(tipoNotificacion != tipoNotif.portal, tipoNotificacion != tipoNotif.piso, tipoNotificacion != tipoNotif.puerta, msgg:mensajeNotificacion )
    user:Usuario()
    f:Focus(foco == obj)
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("peticionPortalImperativo"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	retract(notif);
end


rule "Regla de obtencion del portal" 
 when
 	obGeneral:ObtenerInfoUsuario(state == Objetivo.PENDING)
 	obj:ObtenerPortal(state == Objetivo.PENDING)
 	notif:Notificacion(tipoNotificacion == tipoNotif.portal, msgg:mensajeNotificacion )
    notif2:Notificacion(tipoNotificacion == tipoNotif.piso, msgg2:mensajeNotificacion )
    user:Usuario()
    f:Focus(foco == obj)
 then
 	obj.setSolved();
 	
	Direccion direccion = user.getDireccion();
 	direccion.setNumero(Integer.parseInt(msgg));
 	user.setDireccion(direccion);
 	
 	user.actividad();
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("tengoTuPortal"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	
   	Objetivo ob2 = new ObtenerPiso();
   	f.setFoco(ob2);
   	
   	update(f);
   	update(obj);
   	retract(notif);
   	retract(notif2);
    insert(ob2);
end

rule "Regla de obtencion del portal 2" 
 when
 	obGeneral:ObtenerInfoUsuario(state == Objetivo.PENDING)
 	obj:ObtenerPortal(state == Objetivo.PENDING)
 	notif:Notificacion(tipoNotificacion == tipoNotif.portal, msgg:mensajeNotificacion )
    notif2:Notificacion(tipoNotificacion == tipoNotif.piso, msgg2:mensajeNotificacion )
    notif3:Notificacion(tipoNotificacion == tipoNotif.puerta, msgg3:mensajeNotificacion )
    user:Usuario()
    f:Focus(foco == obj)
 then
 	obj.setSolved();
 	
	Direccion direccion = user.getDireccion();
 	direccion.setNumero(Integer.parseInt(msgg));
 	user.setDireccion(direccion);
 	
 	user.actividad();
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("tengoTuPortal"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	
   	Objetivo ob2 = new ObtenerPiso();
   	f.setFoco(ob2);
   	
   	update(f);
   	update(obj);
   	retract(notif);
   	retract(notif2);
   	retract(notif3);
    insert(ob2);
end


///////////////////////////////////////////////////////
/////////////////// FIN PORTAL ////////////////////////
///////////////////////////////////////////////////////

///////////////////////////////////////////////////////
/////////////////// PISO //////////////////////////////
///////////////////////////////////////////////////////

rule "Regla de solicitar piso"
 when
 	obG:ObtenerInfoUsuario(state == Objetivo.PENDING)
 	obj:ObtenerPiso(state == Objetivo.PENDING)
 	user:Usuario(direccion.numero != Direccion.INTEGER_DEFAULT)
 	f:Focus(foco == obj)
 then
  	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());  	
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("solicitaPiso"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Regla de solicitar piso cuando se obtiene algo que no es un piso"
 when
 	obGeneral:ObtenerInfoUsuario(state == Objetivo.PENDING)
 	obj:ObtenerPiso(state == Objetivo.PENDING)
    notif:Notificacion(tipoNotificacion != tipoNotif.piso, tipoNotificacion != tipoNotif.portal, tipoNotificacion != tipoNotif.puerta, msgg:mensajeNotificacion )
    user:Usuario(direccion.numero != Direccion.INTEGER_DEFAULT)
    f:Focus(foco == obj)
 then
 	Direccion direccion = user.getDireccion();
 
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("peticionPisoImperativo"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	retract(notif);
end

rule "Regla de obtencion del piso" 
 when
 	obGeneral:ObtenerInfoUsuario(state == Objetivo.PENDING)
 	obj:ObtenerPiso(state == Objetivo.PENDING)
    notif:Notificacion(tipoNotificacion == tipoNotif.piso, msgg:mensajeNotificacion )
    notif2:Notificacion(tipoNotificacion == tipoNotif.portal, msgg2:mensajeNotificacion )
    user:Usuario(direccion.numero != Direccion.INTEGER_DEFAULT)
    f:Focus(foco == obj)
 then
 	obj.setSolved();
 	
	Direccion direccion = user.getDireccion();
 	direccion.setPiso(Integer.parseInt(msgg));
 	user.setDireccion(direccion);
 	
 	user.actividad();
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("tengoTuPiso"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	
	Objetivo ob2 = new ObtenerPuerta();
   	f.setFoco(ob2);
   	
   	update(f);
   	update(obj);
   	retract(notif);
   	retract(notif2);
    insert(ob2);
end


rule "Regla de obtencion del piso 2" 
 when
 	obGeneral:ObtenerInfoUsuario(state == Objetivo.PENDING)
 	obj:ObtenerPiso(state == Objetivo.PENDING)
    notif:Notificacion(tipoNotificacion == tipoNotif.piso, msgg:mensajeNotificacion )
    user:Usuario()
    f:Focus(foco == obj)
 then
 	obj.setSolved();
 	
	Direccion direccion = user.getDireccion();
	
	if (msgg.equalsIgnoreCase("bajo")) msgg = "0";
	else if (msgg.equalsIgnoreCase("primero")) msgg = "1";
	else if (msgg.equalsIgnoreCase("segundo")) msgg = "2";
	else if (msgg.equalsIgnoreCase("tercero")) msgg = "3";
	else if (msgg.equalsIgnoreCase("cuarto")) msgg = "4";
	else if (msgg.equalsIgnoreCase("quinto")) msgg = "5";
	else if (msgg.equalsIgnoreCase("sexto")) msgg = "6";
	else if (msgg.equalsIgnoreCase("septimo") || msgg.equalsIgnoreCase("s√©ptimo")) msgg = "7";
	else if (msgg.equalsIgnoreCase("octavo")) msgg = "8";
	else if (msgg.equalsIgnoreCase("noveno")) msgg = "9";
	else if (msgg.equalsIgnoreCase("decimo") || msgg.equalsIgnoreCase("d√©cimo")) msgg = "10";
	else if (msgg.equalsIgnoreCase("undecimo") || msgg.equalsIgnoreCase("und√©cimo")) msgg = "11";
	
 	direccion.setPiso(Integer.parseInt(msgg));
 	user.setDireccion(direccion);
 	
 	user.actividad();
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("tengoTuPiso"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	
   	Objetivo ob2 = new ObtenerPuerta();
   	f.setFoco(ob2);
   	
   	update(f);
   	update(obj);
   	retract(notif);
    insert(ob2);
end

rule "Regla de obtencion del piso 3"
	when
		obGeneral:ObtenerInfoUsuario(state == Objetivo.PENDING)
		obj:ObtenerPiso(state == Objetivo.PENDING)
		notif:Notificacion(tipoNotificacion == tipoNotif.piso, msgg:mensajeNotificacion )
		notif2:Notificacion(tipoNotificacion == tipoNotif.portal, msgg2:mensajeNotificacion )
		notif3:Notificacion(tipoNotificacion == tipoNotif.puerta, msgg3:mensajeNotificacion )
		user:Usuario(direccion.numero != Direccion.INTEGER_DEFAULT)
		f:Focus(foco == obj)
	then
		obj.setSolved();
		
		Direccion direccion = user.getDireccion();
		direccion.setPiso(Integer.parseInt(msgg));
		user.setDireccion(direccion);
		
		user.actividad();
		TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
		tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("tengoTuPiso"));
		recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
		
		Objetivo ob2 = new ObtenerPuerta();
		f.setFoco(ob2);
		
		update(f);
		update(obj);
		retract(notif);
		retract(notif2);
		retract(notif3);
		insert(ob2);
end

///////////////////////////////////////////////////////
/////////////////// FIN PISO //////////////////////////
///////////////////////////////////////////////////////

///////////////////////////////////////////////////////
/////////////////// PUERTA ////////////////////////////
///////////////////////////////////////////////////////

rule "Regla de solicitar puerta"
 when
 	obG:ObtenerInfoUsuario(state == Objetivo.PENDING)
 	obj:ObtenerPuerta(state == Objetivo.PENDING)
 	user:Usuario(direccion.numero != Direccion.INTEGER_DEFAULT, direccion.piso != Direccion.INTEGER_DEFAULT)
 	f:Focus(foco == obj)
 then
  	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());  	
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("solicitaPuerta"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Regla de solicitar puerta cuando se obtiene algo que no es una puerta"
 when
 	obGeneral:ObtenerInfoUsuario(state == Objetivo.PENDING)
 	obj:ObtenerPuerta(state == Objetivo.PENDING)
    notif:Notificacion(tipoNotificacion != tipoNotif.piso, tipoNotificacion != tipoNotif.portal, tipoNotificacion != tipoNotif.puerta, msgg:mensajeNotificacion )
    user:Usuario(direccion.numero != Direccion.INTEGER_DEFAULT, direccion.piso != Direccion.INTEGER_DEFAULT)
    f:Focus(foco == obj)
 then
 	Direccion direccion = user.getDireccion();
 
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("peticionPuertaImperativo"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	retract(notif);
end

rule "Regla de obtencion de la puerta" 
 when
 	obGeneral:ObtenerInfoUsuario(state == Objetivo.PENDING)
 	obj:ObtenerPuerta(state == Objetivo.PENDING)
    notif:Notificacion(tipoNotificacion == tipoNotif.puerta, msgg:mensajeNotificacion )
    notif2:Notificacion(tipoNotificacion == tipoNotif.piso, msgg2:mensajeNotificacion )
    notif3:Notificacion(tipoNotificacion == tipoNotif.portal, msgg3:mensajeNotificacion )
    user:Usuario(direccion.numero != Direccion.INTEGER_DEFAULT, direccion.piso != Direccion.INTEGER_DEFAULT)
    f:Focus(foco == obj)
 then
 	obj.setSolved();
 	
	Direccion direccion = user.getDireccion();
	direccion.setPuerta(msgg);
 	user.setDireccion(direccion);
 	
 	user.actividad();
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("tengoTuPuerta"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	
   	update(f);
   	update(obj);
   	retract(notif);
   	retract(notif2);
   	retract(notif3);
   	
   	obGeneral.setSolved();
   	update(obGeneral);
   	f.setFoco(obGeneral);
   	update(f);
end

rule "Regla de obtencion de la puerta 2" 
 when
 	obGeneral:ObtenerInfoUsuario(state == Objetivo.PENDING)
 	obj:ObtenerPuerta(state == Objetivo.PENDING)
    notif:Notificacion(tipoNotificacion == tipoNotif.puerta, msgg:mensajeNotificacion )
    user:Usuario(direccion.numero != Direccion.INTEGER_DEFAULT, direccion.piso != Direccion.INTEGER_DEFAULT)
    f:Focus(foco == obj)
 then
 	obj.setSolved();
 	
	Direccion direccion = user.getDireccion();
 	direccion.setPuerta(msgg);
 	user.setDireccion(direccion);
 	
 	user.actividad();
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("tengoTuPuerta"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	
   	update(f);
   	update(obj);
   	retract(notif);
   	
   	obGeneral.setSolved();
   	update(obGeneral);
   	f.setFoco(obGeneral);
   	update(f);
   	
end

///////////////////////////////////////////////////////
/////////////////// FIN PUERTA ////////////////////////
///////////////////////////////////////////////////////


// √öLTIMA REGLA, devuelve el control al agente contexto para que dirija la conversaci√≥n

rule "Enviar mensaje al agente contexto cuando acaba el agente identificador"
when
 	obGeneral:ObtenerInfoUsuario(group:objectReferenceId, state == Objetivo.SOLVED)
 	f:Focus(foco == obGeneral)
 	user:Usuario()
then

	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("tengoTusDatos"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	

	// TODO: Actualizar los datos del usuario

	// Enviar mensaje de finalizado
	InterfazUsoAgente iftAgente = (InterfazUsoAgente)NombresPredefinidos.
  		REPOSITORIO_INTERFACES_OBJ.obtenerInterfaz(NombresPredefinidos.ITF_USO + VocabularioGestionPizzeria.IdentAgenteContexto);
  	Notificacion notifPide = new Notificacion(agentId);
  	notifPide.setTipoNotificacion(tipoNotif.pidePizza);
  	notifPide.setMensajeNotificacion("El agente identificador ha terminado ");
   	MensajeSimple mensaje = new MensajeSimple(notifPide, VocabularioGestionPizzeria.IdentAgenteIdentificadorBotzza, VocabularioGestionPizzeria.IdentAgenteContexto);
   	iftAgente.aceptaMensaje(mensaje);
   	f.setFoco(null);
   	update(f);
end


