import icaro.infraestructura.recursosOrganizacion.recursoTrazas.ItfUsoRecursoTrazas;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.imp.componentes.InfoTraza;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.*;
import icaro.infraestructura.patronAgenteCognitivo.procesadorObjetivos.gestorTareas.ItfGestorTareas;
import icaro.infraestructura.entidadesBasicas.PerformativaUsuario;
import icaro.infraestructura.entidadesBasicas.comunicacion.*
import icaro.aplicaciones.agentes.AgenteAplicacionIdentificadorBotzza.objetivos.*;

import icaro.aplicaciones.agentes.AgenteAplicacionIdentificadorBotzza.tareas.*;
import icaro.aplicaciones.agentes.AgenteAplicacionIdentificadorBotzza.tools.*;
import icaro.aplicaciones.informacion.gestionPizzeria.*;
import icaro.aplicaciones.agentes.AgenteAplicacionPizzero.objetivos.*;
import icaro.infraestructura.entidadesBasicas.interfaces.InterfazUsoAgente;
import icaro.infraestructura.entidadesBasicas.NombresPredefinidos;
import icaro.infraestructura.entidadesBasicas.comunicacion.MensajeSimple;

global ItfGestorTareas gestorTareas;
global ItfUsoRecursoTrazas recursoTrazas;
global String agentId;


// "grupo" es el nombre del usuario del chat.

rule "Creacion de los objetivos iniciales"
when 
then 
	TareaSincrona tarea = gestorTareas.crearTareaSincrona(InicializarInfoWorkMem.class);
    tarea.ejecutar();
	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end

/*
rule "Saludo Inicial"
when
then
     TareaSincrona tarea = gestorTareas.crearTareaSincrona(SaludoInicial.class);
     tarea.ejecutar(VocabularioGestionPizzeria.IdentRecursoComunicacionChat);
     recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end


rule "Saludo inicial cuando el grupo dice algo que no es un saludo"
 when
    notif:Notificacion(identInterlc:identNotificador, tipoNotificacion != tipoNotif.saludo)
    not( exists (Usuario(username == identInterlc )))
 then
 	Usuario gr = new Usuario();
 	gr.username = identInterlc;
 	insert( gr );
 	FocoUsuario fgr = new FocoUsuario(identInterlc);
 	Objetivo ob = new ObtenerInfoUsuario();
 	ob.setobjectReferenceId(identInterlc);
 	insert( fgr );
 	insert( ob );
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(identInterlc,ConversacionBotzza.msg("saludoInicialNoSaludo"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    retract(notif);
end

rule "Saludo inicial cuando el grupo saluda y no se conoce"
 when
    notif:Notificacion(identInterlc:identNotificador, tipoNotificacion == tipoNotif.saludo)
    not( exists (Usuario(username == identInterlc )))
 then
 	Usuario gr = new Usuario();
 	gr.username = identInterlc;
 	insert( gr );
 	FocoUsuario fgr = new FocoUsuario(identInterlc);
 	Objetivo ob = new ObtenerInfoUsuario();
 	ob.setobjectReferenceId(identInterlc);
 	insert( fgr );
 	insert( ob );
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(identInterlc,ConversacionBotzza.msg("saludoInicialDesconocido"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    retract(notif);
end

rule "Saludo inicial cuando el grupo saluda y se conoce"
 when
    notif:Notificacion(identInterlc:identNotificador, tipoNotificacion == tipoNotif.saludo)
   	gr:Usuario(username == identInterlc)
 then
 	FocoUsuario fgr = new FocoUsuario(identInterlc);
 	Objetivo ob = new ObtenerInfoUsuario();
 	ob.setobjectReferenceId(identInterlc);
 	insert( fgr );
 	insert( ob );
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(identInterlc,ConversacionBotzza.msg("saludoInicial"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    retract(notif);
end


rule "Respuesta ante resaludo del grupo conocido"
 when
    notif:Notificacion(identInterlc:identNotificador, tipoNotificacion == tipoNotif.saludo)
   	gr:Usuario(username == identInterlc)
 then
  	 TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
     tarea.ejecutar(identInterlc,ConversacionBotzza.msg("volverASaludar"));
     recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
     gr.actividad();
     retract(notif);
end

*/

rule "Notificar desconocimiento"
 when
 	notif:Notificacion(group:identNotificador, tipoNotificacion == VocabularioGestionPizzeria.ExtraccionSemanticaNull )
	gr:Usuario(username == group)
 then
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(group,ConversacionBotzza.msg("desconocido"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    gr.actividad();
    retract(notif);
end

rule "Despedirse"
	when 
	 notif:Notificacion(identInterlc:identNotificador, tipoNotificacion == tipoNotif.despedida)
 	 gr:Usuario(username == identInterlc )
	 then
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());
	// TODO eliminar sesion ?
   TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
     tarea.ejecutar(gr.username,  ConversacionBotzza.msg("despedida"));
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   
   retract( notif );
end

////////////////////////////


rule "Regla de saludar al usuario en funci√≥n de si es conocido o no"
 when
    notif:Notificacion(tipoNotificacion == tipoNotif.saludar, msgg:mensajeNotificacion)
 then 
  	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());  	
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(SaludoInicial.class);  	
    tarea.ejecutar();
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	retract(notif);
   	Objetivo obGeneral = new ObtenerInfoUsuario();
   	insert(obGeneral);
end

rule "Preguntar si quiere usar la misma direccion siendo usuario conocido"
when
	obG:ObtenerInfoUsuario(state == Objetivo.PENDING)
	obj:ConfirmarDireccion(state == Objetivo.PENDING)
    f:Focus(foco == obj)
	user: Usuario()
then 
	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("solicitaConfirmarDireccion"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	
   	TareaSincrona tarea2 = gestorTareas.crearTareaSincrona(MostrarDireccion.class);
   	tarea2.ejecutar(user);
end

rule "Regla de solicitar confirmar direccion cuando no dice ni que si ni que no"
 when
 	obG:ObtenerInfoUsuario(state == Objetivo.PENDING)
	obj:ConfirmarDireccion(state == Objetivo.PENDING)
    f:Focus(foco == obj)
	user: Usuario()
	notif:Notificacion(tipoNotificacion != tipoNotif.si && tipoNotificacion != tipoNotif.no, msgg:mensajeNotificacion )
 then
 
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("solicitarConfirmarDireccionImperativo"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
  	 
   	retract(notif);
end

rule "Regla obtener confirmar direccion afirmativa para usuario conocido"
when
	obG:ObtenerInfoUsuario(state == Objetivo.PENDING)
	obj:ConfirmarDireccion(state == Objetivo.PENDING)
    f:Focus(foco == obj)
	user: Usuario()
	notif:Notificacion(tipoNotificacion == tipoNotif.si, msgg:mensajeNotificacion )
then 
	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("direccionConfirmada"));
	// Actualizo el objetivo general a resuelto y he acabado
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	obG.setSolved();
   	obj.setSolved();
   	f.setFoco(obG);
   	update(f);
   	update(obj);
   	update(obG);
   	retract(notif);
end

rule "Regla obtener confirmar direccion negativo para usuario conocido"
when
	obG:ObtenerInfoUsuario(state == Objetivo.PENDING)
	obj:ConfirmarDireccion(state == Objetivo.PENDING)
	user: Usuario()
	f:Focus(foco == obj)
	notif:Notificacion(tipoNotificacion == tipoNotif.no, msgg:mensajeNotificacion )
then 
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	Objetivo obN = new ObtenerDireccion();
   	insert(obN);
   	obj.setSolved();
   	f.setFoco(obN);
   	update(f);
   	update(obj);	
   	retract(notif);
end

rule "Regla de solicitar nombre"
 when
 	obG:ObtenerInfoUsuario(state == Objetivo.PENDING)
 	obj:ObtenerNombreUsuario(state == Objetivo.PENDING)
 	user:Usuario()
 	f:Focus(foco == obj)
 then
  	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("solicitarNombre"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Regla de solicitar nombre cuando se obtiene algo que no es el nombre"
 when
 	obGeneral:ObtenerInfoUsuario(state == Objetivo.PENDING)
 	obj:ObtenerNombreUsuario(state == Objetivo.PENDING)
    notif:Notificacion(tipoNotificacion != tipoNotif.nombres, msgg:mensajeNotificacion )
    user:Usuario()
    f:Focus(foco == obj)
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("solicitarNombreImperativo"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	retract(notif);
end

rule "Regla de obtencion del nombre" 
 when
 	obGeneral:ObtenerInfoUsuario(state == Objetivo.PENDING)
 	ob:ObtenerNombreUsuario(state == Objetivo.PENDING)
    notif:Notificacion(tipoNotificacion == tipoNotif.nombres, msgg:mensajeNotificacion )
    user:Usuario()
    f:Focus(foco == ob)
 then
 	ob.setSolved();
 	user.setNombre(msgg);
 	user.actividad();
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("tengoTuNombre"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	
   	// creamos objetivo de obtener el apellido, ya que tenemos el nombre!
   	Objetivo ob2 = new ObtenerApellidoUsuario();
   	update(ob);
   	f.setFoco(ob2);
   	update(f);
   	retract(notif);
   	insert(ob2);
end

rule "Regla de solicitar apellido"
 when
 	obG:ObtenerInfoUsuario(state == Objetivo.PENDING)
 	obj:ObtenerApellidoUsuario(state == Objetivo.PENDING)
    user:Usuario()
    f:Focus(foco == obj)
 then
  	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());	
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("solicitarApellido"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Regla de solicitar el apellido cuando se obtiene algo que no es el apellido" 
 when
 	obGeneral:ObtenerInfoUsuario(state == Objetivo.PENDING)
 	obj:ObtenerApellidoUsuario(state == Objetivo.PENDING)
    notif:Notificacion(tipoNotificacion != tipoNotif.apellidos, msgg:mensajeNotificacion )
    user:Usuario()
    f:Focus(foco == obj)
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("solicitarApellidoImperativo"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	retract(notif);
end

rule "Regla de obtencion del apellido" 
 when
 	obGeneral:ObtenerInfoUsuario(state == Objetivo.PENDING)
 	obj:ObtenerApellidoUsuario(state == Objetivo.PENDING)
    notif:Notificacion(tipoNotificacion == tipoNotif.apellidos, msgg:mensajeNotificacion )
    user:Usuario()
    f:Focus(foco == obj)
 then
 	user.setApellidos(msgg);
 	user.actividad();
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("tengoTuApellido"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
  	obj.setSolved();
  	update(obj);
   	
   	Objetivo objN = new ObtenerTelefono();
   	f.setFoco(objN);
   	update(f);
   	insert(objN);   	
   	retract(notif);
end


rule "Regla de solicitar n√∫mero de tel√©fono"
 when
 	obG:ObtenerInfoUsuario(state == Objetivo.PENDING)
 	obj:ObtenerTelefono(state == Objetivo.PENDING)
 	user:Usuario()
 	f:Focus(foco == obj)
 then
  	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());  	
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("solicitaTelefono"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Regla de solicitar tel√©fono cuando se obtiene algo que no es un tel√©fono"
 when
 	obGeneral:ObtenerInfoUsuario(state == Objetivo.PENDING)
 	obj:ObtenerTelefono(state == Objetivo.PENDING)
    notif:Notificacion(tipoNotificacion != tipoNotif.telefono, msgg:mensajeNotificacion )
    user:Usuario()
    f:Focus(foco == obj)
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("peticionTelefonoImperativo"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	retract(notif);
end

rule "Regla de obtencion del tel√©fono" 
 when
 	obGeneral:ObtenerInfoUsuario(state == Objetivo.PENDING)
 	obj:ObtenerTelefono(state == Objetivo.PENDING)
    notif:Notificacion(tipoNotificacion == tipoNotif.telefono, msgg:mensajeNotificacion )
    user:Usuario()
    f:Focus(foco == obj)
 then
 	obj.setSolved();
 	user.setMovil(msgg);
 	user.actividad();
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("tengoTuTelefono"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	
   	Objetivo ob2 = new ObtenerDireccion();
   	f.setFoco(ob2);
   	update(f);
   	update(obj);
   	retract(notif);
   	insert(ob2);
end

rule "Regla de solicitar calle"
 when
 	obG:ObtenerInfoUsuario(state == Objetivo.PENDING)
 	obj:ObtenerDireccion(state == Objetivo.PENDING)
 	user:Usuario()
 	f:Focus(foco == obj)
 then
  	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());  	
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenericoBotzza.class);
    tarea.ejecutar(user.getNombre(),ConversacionBotzza.msg("solicitaCalle"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	
   	/*
   	obGeneral.setSolved(); // FIXME esto hay que cambiarlo de sitio a donde se acabe de recopilar la informacion del usuario
   	update(obGeneral);
   	f.setFoco(obGeneral);
   	update(f);
   	*/
end




// √öLTIMA REGLA, devuelve el control al agente contexto para que dirija la conversaci√≥n

rule "Enviar mensaje al agente contexto cuando acaba el agente identificador"
when
 	obGeneral:ObtenerInfoUsuario(group:objectReferenceId, state == Objetivo.SOLVED)
 	f:Focus(foco == obGeneral)
 	user:Usuario()
then
	// TODO: Actualizar los datos del usuario

	// Enviar mensaje de finalizado
	InterfazUsoAgente iftAgente = (InterfazUsoAgente)NombresPredefinidos.
  		REPOSITORIO_INTERFACES_OBJ.obtenerInterfaz(NombresPredefinidos.ITF_USO + VocabularioGestionPizzeria.IdentAgenteContexto);
  	Notificacion notifPide = new Notificacion(agentId);
  	notifPide.setTipoNotificacion(tipoNotif.pidePizza);
  	notifPide.setMensajeNotificacion("El agente identificador ha terminado ");
   	MensajeSimple mensaje = new MensajeSimple(notifPide, VocabularioGestionPizzeria.IdentAgenteIdentificadorBotzza, VocabularioGestionPizzeria.IdentAgenteContexto);
   	iftAgente.aceptaMensaje(mensaje);
   	f.setFoco(null);
   	update(f);
end


